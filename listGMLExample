option explicit

!INC Local Scripts.EAConstants-VBScript

' script:		listGMLExample
' purpose:		Generates one GML example object from each feature type the model
' version:		2018-09-11
' TBD:          roles, supertypes of datatypes, dateformat, (inheritance)loopdetection,,,,detect and set localId=gml:id/namespace=..?,cleanup



'	Skriver til fire filer i egen folder:
'		Liste med navnene på filer som skal inkluderes
'		Objekttypedefinisjoner inkludert nøstet innhold i alle datatyper, ikke arvede (?)
'		Objektutvalg som kobler objekttypenavnet til utvalgsgruppen
'		Elementbeskrivelser som angir datatype og lengde for enkeltelementene
		DIM sosFSO
		DIM sosFolder
		DIM defFile
		DIM objFile
		DIM utvFile
		DIM eleFile
		DIM DefTypes
		DIM def
		DIM obj
		DIM utv
		DIM ele
		DIM debug
		debug = false

sub listGMLExampleForPackage()
	' Show and clear the script output window
	Repository.EnsureOutputVisible "Script"
'	DIM i
	Dim theElement as EA.Element
	Set theElement = Repository.GetTreeSelectedObject()
	if not theElement is nothing  then
		'if theElement.Type="Package" and UCASE(theElement.Stereotype) = "APPLICATIONSCHEMA" then
		if Repository.GetTreeSelectedItemType() = otPackage then
			'Repository.WriteOutput "Script", Now & " " & theElement.Stereotype & " " & theElement.Name, 0
					dim message
			dim box
			box = Msgbox ("Script listGMLExample" & vbCrLf & vbCrLf & "Scriptversion 2018-09-11" & vbCrLf & "Listing to GML example for package : [" & theElement.Name & "].",1)
			select case box
			case vbOK
				dim kortnavn, namespace, xsdfile
				'tømmer System Output for lettere å fange opp hele gml-fila
				Repository.ClearOutput "Script"
				Repository.CreateOutputTab "Error"
				Repository.ClearOutput "Error"
				kortnavn = getPackageTaggedValue(theElement,"SOSI_kortnavn")
				namespace = getPackageTaggedValue(theElement,"targetNamespace")
				xsdfile = getPackageTaggedValue(theElement,"xsdDocument")
				if kortnavn = "" then
					kortnavn = theElement.Name
					Repository.WriteOutput "Script", "Pakken mangler tagged value SOSI_kortnavn! Kjører midlertidig videre med pakkenavnet som forslag til kortnavn: " & vbCrLf & kortnavn, 0
				end if
				
				'SessionOutput("test3: SOSI_kortnavn: " & vbCrLf & utf8(kortnavn) )
				SessionOutput("<?xml version=""1.0"" encoding=""utf-8""?>")
				SessionOutput("<wfs:FeatureCollection")
				SessionOutput("  xmlns=""" & namespace & """")
				SessionOutput("  xmlns:wfs=""http://www.opengis.net/wfs/2.0""")
				SessionOutput("  xmlns:gml=""http://www.opengis.net/gml/3.2""")
				SessionOutput("  xmlns:xlink=""http://www.w3.org/1999/xlink""")
				SessionOutput("  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""")
				SessionOutput("  xsi:schemaLocation=""" & namespace)
				'SessionOutput("                     """ & namespace & "." & kortnavn & ".xsd""")
				SessionOutput("                     " & namespace & "/" & xsdfile)
				SessionOutput("                     http://www.opengis.net/wfs/2.0")
				SessionOutput("                     http://schemas.opengis.net/wfs/2.0/wfs.xsd""")
				'SessionOutput("  timeStamp=""" & now & """")
				SessionOutput("  timeStamp=""" & Year(Date) & "-" & Month(Date) & "-" & Day(Date) & "T" & Hour(Time) & ":" & Minute(Time) & ":" & Second(Time) & "Z""")
				SessionOutput("  numberMatched=""unknown""")
				SessionOutput("  numberReturned=""0"">")
				'SessionOutput("  >")
				'SessionOutput("  <wfs:member>")

				call listFeatureTypes(theElement)

				SessionOutput("</wfs:FeatureCollection>")

				exit sub

				kortnavn = InputBox("Velg produktets kortnavn.", "kortnavn", kortnavn)
				Repository.WriteOutput "Script", Now & "Starter listing til SOSIKontrollfiler for pakke : [" & theElement.Name & "], valgt SOSI_kortnavn: " & vbCrLf & kortnavn, 0

				Set sosFSO=CreateObject("Scripting.FileSystemObject")
				if not sosFSO.FolderExists(kortnavn) then
					sosFSO.CreateFolder kortnavn
				end if
				'TBD to be version agnostic we must replace 50 here with the value in SOSI_versjon (except the dots)
				if not sosFSO.FolderExists(kortnavn & "\kap50") then
					sosFSO.CreateFolder kortnavn & "\kap50"
				end if
				defFile = kortnavn & "\" & "Def_" & getNCNameX(kortnavn) & ".50"
				objFile = kortnavn & "\kap50\" & getNCNameX(kortnavn) & "_o.50"
				utvFile = kortnavn & "\kap50\" & getNCNameX(kortnavn) & "_u.50"
				eleFile = kortnavn & "\kap50\" & getNCNameX(kortnavn) & "_d.50"
				'Repository.WriteOutput "Script", Now & " sosFolder: " & kortnavn & " objFile: " & objFile & " utvFile: " & utvFile & " eleFile: " & eleFile, 0
				Set def = sosFSO.CreateTextFile(defFile,True,False)
				Set obj = sosFSO.CreateTextFile(objFile,True,False)
				Set utv = sosFSO.CreateTextFile(utvFile,True,False)
				Set ele = sosFSO.CreateTextFile(eleFile,True,False)
				'obj.Write".HODE"  & vbCrLf
				'obj.Write"..TEGNSETT UTF-8"  & vbCrLf & vbCrLf
				obj.Write"! *   " & utf8(kortnavn) & "   Objektdefinisjoner generert fra SOSI UML modell   " & now & "   *!"  & vbCrLf & vbCrLf
				'utv.Write".HODE"  & vbCrLf
				'utv.Write"..TEGNSETT UTF-8"  & vbCrLf & vbCrLf
				utv.Write"! *   " & utf8(kortnavn) & "   Utvalgsdefinisjoner generert fra SOSI UML modell   " & now & "   *!"  & vbCrLf & vbCrLf
				'ele.Write".HODE"  & vbCrLf
				'ele.Write"..TEGNSETT UTF-8"  & vbCrLf & vbCrLf
				ele.Write"! *   " & utf8(kortnavn) & "   Elementdefinisjoner generert fra SOSI UML modell   " & now & "   *!"  & vbCrLf & vbCrLf
				'call setBasicSOSITypes()
				'create global sosinametypelist
				Set DefTypes = CreateObject("System.Collections.ArrayList")


				call listFeatureTypes(theElement,kortnavn)
				
				utv.Write".GRUPPE-UTVALG Flateavgrensning" & vbCrLf
				utv.Write"..VELG ""..OBJTYPE"" = Flateavgrensning" & vbCrLf
				utv.Write"..BRUK-REGEL Flateavgrensning" & vbCrLf

				
				def.Write "[SyntaksDefinisjoner]" & vbCrLf
				def.Write "kap50\" & kortnavn & "_d.50" & vbCrLf
				def.Write "STD\SOSISTD.50" & vbCrLf & vbCrLf
				def.Write "[KodeForklaringer]" & vbCrLf
				def.Write "STD\KODER.50" & vbCrLf & vbCrLf
				def.Write "[UtvalgsRegler]" & vbCrLf
				def.Write "kap50\" & kortnavn & "_u.50" & vbCrLf & vbCrLf
				def.Write "[ObjektDefinisjoner]" & vbCrLf
				def.Write "kap50\" & kortnavn & "_o.50" & vbCrLf
				def.Write "STD\Flateavgrensning_o.50" & vbCrLf & vbCrLf
				'Til slutt språkelementdefinisjoner for alle enkeltelementer, med basistype: (...MÅLEMETODE T40")

				ele.Write vbCrLf & ".DEF" & vbCrLf & "..OBJTYPE T32" & vbCrLf

				for i = 0 To DefTypes.Count - 1
					'Repository.WriteOutput "Script", " DefTypes: " & DefTypes(i) & " index: " & i, 0
					ele.Write vbCrLf & ".DEF" & vbCrLf
					ele.Write DefTypes(i) & vbCrLf 
				next

				def.Close
				obj.Close
				utv.Close
				ele.Close
				' Release the file system object
				Set sosFSO = Nothing
				Repository.WriteOutput "Script", Now & " Filer skrevet til katalogen: " & kortnavn & ".",0

			case VBcancel

			end select
	

		Else
		  'Other than CodeList selected in the tree
		  MsgBox( "This script requires a package to be selected in the Project Browser." & vbCrLf & _
			"Please select a package in the Project Browser and try again." )
		end If
		'Repository.WriteOutput "Script", Now & " Finished, check the Error and Types tabs", 0
	else
		'No CodeList selected in the tree
		MsgBox( "This script requires a package to be selected in the Project Browser." & vbCrLf & _
	  "Please select a package in the Project Browser and try again." )
	end if
end sub


sub listFeatureTypes(pkg)
	dim presentasjonsnavn
 	dim elements as EA.Collection 
	dim super as EA.Element
	dim datatype as EA.Element
	dim conn as EA.Collection
 	set elements = pkg.Elements 
	dim i, sosinavn, sositype, sosilengde, sosimin, sosimax, koder, prikkniv, sosierlik, superlist
	dim indent
	if debug then Repository.WriteOutput "Script", "Debug: pkg.Name [" & pkg.Name & "].",0
	for i = 0 to elements.Count - 1 
		dim currentElement as EA.Element 
		set currentElement = elements.GetAt( i ) 
				
		if debug then Repository.WriteOutput "Script", "Debug: currentElement.Name [«" & currentElement.Stereotype & "» " & currentElement.Name & "] currentElement.Type [" & currentElement.Type & "] currentElement.Abstract [" & currentElement.Abstract & "].",0
		if currentElement.Type = "Class" and LCase(currentElement.Stereotype) = "featuretype" and currentElement.Abstract = 0 then
			
			SessionOutput("  <wfs:member>")
			SessionOutput("    <" & currentElement.Name & " gml:id="""& currentElement.Name & ".1"">")
			
			

			superlist = ""
			indent = "      "
			for each conn in currentElement.Connectors
				if conn.Type = "Generalization" then
					if currentElement.ElementID = conn.ClientID then
						superlist = getSupertypes(conn.SupplierID, indent)
					end if
				end if
			next

			call listDatatypes(currentElement,indent)
			SessionOutput("    </" & currentElement.Name & ">")
			SessionOutput("  </wfs:member>")

			if debug then Repository.WriteOutput "Script", "Debug: superlist [" & superlist & "].",0
		end if
	
	next

	dim subP as EA.Package
	for each subP in pkg.packages
	    call listFeatureTypes(subP)
	next


end sub


sub listDatatypes(element,indent)
	dim presentasjonsnavn
 	dim elements as EA.Collection 
	dim super as EA.Element
	dim datatype as EA.Element
	dim conn as EA.Collection
	dim connEnd as EA.ConnectorEnd
	dim i, umlnavn, sosinavn, sositype, sosilengde, sosimin, sosimax, sosierlik, koder, prikkniv1, roleEndElementID, sosidef
	dim indent0, indent1
	
	'exit sub
				
	if element.Type = "Datatype" or (element.Type = "Class" and LCase(element.Stereotype) = "datatype" or LCase(element.Stereotype) = "union" or LCase(element.Stereotype) = "featuretype") then

		dim attr as EA.Attribute
		for each attr in element.Attributes

			'SessionOutput(indent & "<" & attr.Name & ">")

			if getSosiGeometritype(attr) = "" then
				if debug then Repository.WriteOutput "Script", "Debug: attr.Name [" & attr.Name & "] not geometry.",0
				if attr.ClassifierID <> 0 then
					set datatype = Repository.GetElementByID(attr.ClassifierID)
					'see if the datatype has a supertype, if so then write all its elements first - TBD
					
					if datatype.Name = element.Name and datatype.ParentID = element.ParentID then
					'if datatype.ClassifierID = element.ClassifierID then
						Repository.WriteOutput "Script", "Error - circular self reference: datatype.Name [" & datatype.Name & "] from attribute name [" & element.Name & "." & attr.Name & "].",0
					else
						if datatype.Type = "Enumeration" or LCase(datatype.Stereotype) = "codelist" or LCase(datatype.Stereotype) = "enumeration" then
							'list first code in the list
							SessionOutput(indent & "<" & attr.Name & ">" & listCodeType(datatype) & "</" & attr.Name & ">")
							'SessionOutput(indent & "<" & attr.Name & " xlink:href=""" & listReferenceType(attr.Type) & """/>")
							'listCodeType(attr)
						else
							SessionOutput(indent & "<" & attr.Name & ">")
							indent0 = indent & "  "
							SessionOutput(indent0 & "<" & datatype.Name & ">")
							indent1 = indent0 & "  "
							call listDatatypes(datatype,indent1)
							SessionOutput(indent0 & "</" & datatype.Name & ">")
							SessionOutput(indent & "</" & attr.Name & ">")
						end if
					end if
				else
					'base type
					SessionOutput(indent & "<" & attr.Name & ">" & listBaseType(attr.Type) & "</" & attr.Name & ">")

				end if
			else
				'geometry type 
				if debug then Repository.WriteOutput "Script", "Debug: attr.Name [" & attr.Name & "] is geometry: " & getSosiGeometritype(attr) & ".",0
				SessionOutput(indent & "<" & attr.Name & ">")
				call listGeometryType(element.Name, attr.Type, indent & "  ")			
				SessionOutput(indent & "</" & attr.Name & ">")
			end if

			'SessionOutput(indent & "</" & attr.Name & ">")
		next
			
		for each conn in element.Connectors
			if conn.Type = "Generalization" or conn.Type = "Realisation" or conn.Type = "NoteLink" then

			else
			if false then
				'Repository.WriteOutput "Script", "Debug: Supplier Role.Name [" & conn.SupplierEnd.Role & "] datatypens SOSI_navn [" & getTaggedValue(Repository.GetElementByID(conn.ClientID).Name,"SOSI_navn") & "].",0
				'Repository.WriteOutput "Script", "Debug: Client Role.Name [" & conn.ClientEnd.Role & "] datatypens SOSI_navn [" & getTaggedValue(Repository.GetElementByID(conn.ClientID).Name,"SOSI_navn") & "].",0
				if debug then Repository.WriteOutput "Script", "Debug: Supplier Role.Name [" & conn.SupplierEnd.Role & "] datatypens SOSI_navn [" & Repository.GetElementByID(conn.SupplierID).Name & "].",0
				if debug then Repository.WriteOutput "Script", "Debug: Client Role.Name [" & conn.ClientEnd.Role & "] datatypens SOSI_navn [" & Repository.GetElementByID(conn.ClientID).Name & "].",0
				sositype = "REF"
				sosimin = "0"
				sosimax = "N"
				sosierlik = "><"
				koder = ""
				if conn.ClientID = element.ElementID then
					set datatype = Repository.GetElementByID(conn.SupplierID)
					umlnavn = conn.SupplierEnd.Role
					sosinavn = getConnectorEndTaggedValue(conn.SupplierEnd,"SOSI_navn")
					if conn.SupplierEnd.Cardinality <> "" then
						if Mid(conn.SupplierEnd.Cardinality,1,1) <> "*" then
							sosimin = Mid(conn.SupplierEnd.Cardinality,1,1)
						end if
						if Mid(conn.SupplierEnd.Cardinality,Len(conn.SupplierEnd.Cardinality),1) <> "*" then
							sosimax = Mid(conn.SupplierEnd.Cardinality,Len(conn.SupplierEnd.Cardinality),1)
						end if
					end if
				else
					set datatype = Repository.GetElementByID(conn.ClientID)
					umlnavn = conn.ClientEnd.Role
					sosinavn = getConnectorEndTaggedValue(conn.ClientEnd,"SOSI_navn")
					if conn.ClientEnd.Cardinality <> "" then
						if Mid(conn.ClientEnd.Cardinality,1,1) <> "*" then
							sosimin = Mid(conn.ClientEnd.Cardinality,1,1)
						end if
						if Mid(conn.ClientEnd.Cardinality,Len(conn.ClientEnd.Cardinality),1) <> "*" then
							sosimax = Mid(conn.ClientEnd.Cardinality,Len(conn.ClientEnd.Cardinality),1)
						end if
					end if
				end if
				if umlnavn <> "" then
					if sosinavn = "" then
						sosinavn = umlnavn
					end if
					obj.Write"..EGENSKAP """ & utf8(umlnavn) & """ " & utf8(datatype.Name) & " """ & prikkniv & utf8(sosinavn) & """ " & utf8(sositype) & " " & sosimin & " " & sosimax & "  " & sosierlik & " (" & koder & ")" & vbCrLf

					sosidef = prikkniv & sosinavn & " REF"
					'if sositype <> "*" then 
						if DefTypes.IndexOf(sosidef,0) = -1 then	
							' 	ikke i lista, legges inn
							DefTypes.Add sosidef
						end if
					'end if
					
					'if composition2datatype then
						'Brukerdefinert datatype
						if datatype.Type = "Class" and LCase(datatype.Stereotype) = "datatype" or LCase(datatype.Stereotype) = "union" then
							if debug then Repository.WriteOutput "Script", "Debug: datatype.Name [" & datatype.Name & "] datatypens SOSI_navn [" & getTaggedValue(datatype,"SOSI_navn") & "].",0
							'             set datatype = Repository.GetElementByID(attr.ClassifierID)
							sositype = "*"
							if prikkniv <> ".." or sositype = "*" then 
								'if  prikkniv = ".." and ! sositypeWritten(sositype) then
									if  prikkniv = ".." and sositype = "*" then 
										ele.Write vbCrLf & ".DEF" & vbCrLf
										' sositypeWritten.Add(sositype)
									end if
									ele.Write prikkniv & utf8(sosinavn) & " " & utf8(sositype) & vbCrLf
								'end if
							end if
							
							prikkniv1 = prikkniv & "."
							if datatype.Name = element.Name then
								Repository.WriteOutput "Script", "Error - circular self reference: datatype.Name [" & datatype.Name & "] from role name [" & element.Name & "." & umlnavn & "].",0
							else
								call listDatatypes(datatype,prikkniv1)
							end if
						else
							' association may be to a feature type
						end if
				end if

			end if 'false
	
			end if

		next

	end if

end sub


function listBaseType(umltype)
	listBaseType = "*"
	if umltype = "CharacterString" then
		listBaseType = "Some text"
	end if
	if umltype = "Boolean" then
		listBaseType = "true"
	end if
	if umltype = "Date" then
		listBaseType = "2018-09-11"
	end if
	if umltype = "DateTime" then
		listBaseType = "2018-09-11T21:08:00Z"
	end if
	if umltype = "Integer" then
		listBaseType = "99"
	end if
	if umltype = "Real" then
		listBaseType = "99.99"
	end if
end function


function listCodeType(element)
	listCodeType = "*"
	dim attr as EA.Attribute
	for each attr in element.Attributes
		listCodeType = attr.Name
		if attr.Default <> "" then listCodeType = attr.Default
		exit for
	next
end function

sub listGeometryType(elementName, geomtype, indent)

		if geomtype = "Punkt" or geomtype = "GM_Point" then
				SessionOutput(indent & "<gml:Point gml:id = """ & elementName & ".pn.1"" srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "  <gml:pos>60.02 10.1</gml:pos>")
				SessionOutput(indent & "</gml:Point>")
		end if
		if geomtype = "Sverm" or geomtype = "GM_MultiPoint" then
			'getSosiGeometritype = "SVERM"
		end if
		if geomtype = "Kurve" or geomtype = "GM_Curve" or geomtype = "GM_CompositeCurve" then
'				SessionOutput(indent & "<gml:Curve gml:id = """ & elementName & ".cu.1"" srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
'
				SessionOutput(indent & "<gml:LineString gml:id = """ & elementName & ".cu.1"" srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "  <gml:posList>60.02 10.1 60.02 10.3 60.03 10.2</gml:posList>")
				SessionOutput(indent & "</gml:LineString>")
		end if
		if geomtype = "Flate" or geomtype = "GM_Surface" or geomtype = "GM_CompositeSurface" then
'				SessionOutput(indent & "<gml:Surface gml:id = """ & elementName & ".su.1"" srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "<gml:Polygon gml:id = """ & elementName & ".su.1"" srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "  <gml:exterior>")
				SessionOutput(indent & "    <gml:LinearRing>")
				SessionOutput(indent & "      <gml:posList>60.02 10.1 60.02 10.3 60.03 10.2 60.02 10.1</gml:posList>")
				SessionOutput(indent & "    </gml:LinearRing>")
				SessionOutput(indent & "  </gml:exterior>")
				SessionOutput(indent & "</gml:Polygon>")
'				SessionOutput(indent & "</gml:Surface>")
		end if
		if geomtype = "GM_Solid" or geomtype = "GM_CompositeSolid" then
			'getSosiGeometritype = "NO GO"
		end if
		if geomtype = "GM_Object" or geomtype = "GM_Primitive" then
				SessionOutput(indent & "<gml:Point gml:id = """ & elementName & ".ob.1"" srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "  <gml:pos>60.02 10.1</gml:pos>")
				SessionOutput(indent & "</gml:Point>")
		end if
end sub

function getSupertypes(elementID, indent)
	dim super as EA.Element
	dim conn as EA.Collection
	dim supername, supernames
	set super = Repository.GetElementByID(elementID)
	for each conn in super.Connectors
		if conn.Type = "Generalization" then
			if super.ElementID = conn.ClientID then
				supername = getSupertypes(conn.SupplierID, indent)
			end if
		end if
	next
	'if debug then Repository.WriteOutput "Script", "Debug: super.Name [" & super.Name & "]  supername [" & supername & "].",0
	getSupertypes = supername & " "  & super.Name
	call listDataTypes(super, indent)
end function

function getKoder(element)
		dim kode, koder
		koder = ""
		dim attr as EA.Attribute
		for each attr in element.Attributes
			'if debug then Repository.WriteOutput "Script", "Debug: code.Name [" & attr.Name & "] SOSI_navn [" & getTaggedValue(attr,"SOSI_navn") & "].",0
			kode = utf8(attr.Name)
			if getTaggedValue(attr,"SOSI_verdi") <> "" then
				kode = utf8(getTaggedValue(attr,"SOSI_verdi"))
			end if
			if attr.Default <> "" then
				kode = utf8(attr.Default)
			end if
			
			koder = koder & "," & kode
		next
		if Len(koder) < 2 then
			getKoder = ""
		else
			getKoder = Mid(koder,2,Len(koder))
		end if
end function

function getSosiGeometrityper(element)
		dim typer
		typer = ""
		dim attr as EA.Attribute
		for each attr in element.Attributes
			if getSosiGeometritype(attr) <> "" then
				typer = typer & "," & getSosiGeometritype(attr)
			end if
		next
		if Len(typer) < 2 then
			getSosiGeometrityper = ""
		else
			getSosiGeometrityper = Mid(typer,2,Len(typer))
		end if
end function


function getSosiGeometritype(element)

		getSosiGeometritype = ""
		if element.Type = "Punkt" or element.Type = "GM_Point" then
			getSosiGeometritype = "PUNKT"
		end if
		if element.Type = "Sverm" or element.Type = "GM_MultiPoint" then
			getSosiGeometritype = "SVERM"
		end if
		if element.Type = "Kurve" or element.Type = "GM_Curve" or element.Type = "GM_CompositeCurve" then
			getSosiGeometritype = "KURVE,BUEP,KLOTOIDE"
		end if
		if element.Type = "Flate" or element.Type = "GM_Surface" or element.Type = "GM_CompositeSurface" then
			getSosiGeometritype = "FLATE"
		end if
		if element.Type = "GM_Object" or element.Type = "GM_Primitive" then
			getSosiGeometritype = "PUNKT,SVERM,KURVE,BUEP,KLOTOIDE,FLATE"
		end if
end function


function getTaggedValue(element,taggedValueName)
		dim i, existingTaggedValue
		getTaggedValue = ""
		for i = 0 to element.TaggedValues.Count - 1
			set existingTaggedValue = element.TaggedValues.GetAt(i)
			if existingTaggedValue.Name = taggedValueName then
				getTaggedValue = existingTaggedValue.Value
			end if
		next
end function

function getPackageTaggedValue(package,taggedValueName)
		dim i, existingTaggedValue
		getPackageTaggedValue = ""
		for i = 0 to package.element.TaggedValues.Count - 1
			set existingTaggedValue = package.element.TaggedValues.GetAt(i)
			if existingTaggedValue.Name = taggedValueName then
				getPackageTaggedValue = existingTaggedValue.Value
			end if
		next
end function

function getConnectorEndTaggedValue(connectorEnd,taggedValueName)
	getConnectorEndTaggedValue = ""
	if not connectorEnd is nothing and Len(taggedValueName) > 0 then
		dim existingTaggedValue as EA.RoleTag 
		dim i
		for i = 0 to connectorEnd.TaggedValues.Count - 1
			set existingTaggedValue = connectorEnd.TaggedValues.GetAt(i)
			if existingTaggedValue.Tag = taggedValueName then
				getConnectorEndTaggedValue = existingTaggedValue.Value
			end if 
		next
	end if 
end function 

function getNCNameX(str)
	' make name legal SOSI-Kontrolfil (NC+ingen punktum)
	Dim txt, res, tegn, i, u
    u=0
		txt = Trim(str)
		'res = LCase( Mid(txt,1,1) )
		res = Mid(txt,1,1)
			'Repository.WriteOutput "Script", "New NCName: " & txt & " " & res,0

		' loop gjennom alle tegn
		For i = 2 To Len(txt)
		  ' blank, komma, !, ", #, $, %, &, ', (, ), *, +, /, :, ;, <, =, >, ?, @, [, \, ], ^, `, {, |, }, ~
		  ' (tatt med flere fnuttetyper, men hva med "."?) (‘'«»’)
		  tegn = Mid(txt,i,1)
		  if tegn = "." Then
			  'Repository.WriteOutput "Script", "Bad0 in SOSI-kontrollfil: " & tegn,0
			  u=1
		  Else
		  if tegn = " " or tegn = "," or tegn = """" or tegn = "#" or tegn = "$" or tegn = "%" or tegn = "&" or tegn = "(" or tegn = ")" or tegn = "*" Then
			  'Repository.WriteOutput "Script", "Bad1: " & tegn,0
			  u=1
		  Else
		    if tegn = "+" or tegn = "/" or tegn = ":" or tegn = ";" or tegn = "<" or tegn = ">" or tegn = "?" or tegn = "@" or tegn = "[" or tegn = "\" Then
			    'Repository.WriteOutput "Script", "Bad2: " & tegn,0
			    u=1
		    Else
		      If tegn = "]" or tegn = "^" or tegn = "`" or tegn = "{" or tegn = "|" or tegn = "}" or tegn = "~" or tegn = "'" or tegn = "´" or tegn = "¨" Then
			      'Repository.WriteOutput "Script", "Bad3: " & tegn,0
			      u=1
		      else
			      'Repository.WriteOutput "Script", "Good: " & tegn,0
			      If u = 1 Then
		          res = res + UCase(tegn)
		          u=0
			      else
		          res = res + tegn
		        End If
		      End If
		    End If
		  End If
		  End If
		Next
		' return res
		getNCNameX = res

End function

function getDefinitionText(currentElement)

    Dim txt, res, tegn, i, u
    u=0
	getDefinitionText = ""
		txt = Trim(currentElement.Notes)
		res = ""
		' loop gjennom alle tegn
		For i = 1 To Len(txt)
		  tegn = Mid(txt,i,1)
		  If tegn = ";" Then
			  res = res + " "
		  Else 
			If tegn = """" Then
			  res = res + "'"
			Else
			  If tegn < " " Then
			    res = res + " "
			  Else
			    res = res + Mid(txt,i,1)
			  End If
			End If
		  End If
		  
		Next
		
	getDefinitionText = res

end function

function getBasicSOSIType(umltype)
	getBasicSOSIType = "*"
	if umltype = "CharacterString" then
		getBasicSOSIType = "T"
	end if
	if umltype = "Boolean" then
		getBasicSOSIType = "BOOLSK"
	end if
	if umltype = "Date" then
		getBasicSOSIType = "DATO"
	end if
	if umltype = "DateTime" then
		getBasicSOSIType = "DATOTID"
	end if
	if umltype = "Integer" then
		getBasicSOSIType = "H"
	end if
	if umltype = "Real" then
		getBasicSOSIType = "D"
	end if
end function

function utf8(str)
	' make string utf-8
	Dim txt, res, tegn, utegn, vtegn, wtegn, xtegn, i
	
	utf8 = str
	exit function
	
    res = ""
	txt = Trim(str)
	' loop gjennom alle tegn
	For i = 1 To Len(txt)
		tegn = Mid(txt,i,1)

		'if      (c <    0x80) {  *out++=  c;                bits= -6; }
        'else if (c <   0x800) {  *out++= ((c >>  6) & 0x1F) | 0xC0;  bits=  0; }
        'else if (c < 0x10000) {  *out++= ((c >> 12) & 0x0F) | 0xE0;  bits=  6; }
        'else                  {  *out++= ((c >> 18) & 0x07) | 0xF0;  bits= 12; }

		if AscW(tegn) < 128 then
			res = res + tegn
		else if AscW(tegn) < 2048 then
			'u = AscW(tegn)
			'Repository.WriteOutput "Script", "tegn: " & AscW(tegn) & " " & Chr(AscW(tegn) / 64) & " " & int(u / 64),0
			'            c   229=E5/1110 0101
			'            c   192=C0/1100 0000  64=40/0100 0000
			utegn = Chr((int(AscW(tegn) / 64) or 192) )
			res = res + utegn
			'               c          63=3F/0011 1111
			vtegn = Chr((AscW(tegn) and 63) or 128)
			res = res + vtegn
			'            C3A5=å   195/1100 0011   165/1010 0101
			'Repository.WriteOutput "Script", "utf8: " & tegn & " -> " & utegn & " + " & vtegn,0
			'Repository.WriteOutput "Script", "int : " & AscW(tegn) & " -> " & Asc(utegn) & " + " & Asc(vtegn),0
		else if AscW(tegn) < 65536 then
			utegn = Chr((int(AscW(tegn) / 4096) or 224) )
			res = res + utegn
			vtegn = Chr((int(AscW(tegn) / 64) or 128) )
			res = res + vtegn
			wtegn = Chr((AscW(tegn) and 63) or 128)
			res = res + wtegn
			'putchar (0xE0 | c>>12);  E0=224, 2^12=4096
			'putchar (0x80 | c>>6 & 0x3F);  80=128, 2^6=64
			'putchar (0x80 | c & 0x3F);  80=128
		else if AscW(tegn) < 2097152 then	'/* 2^21 */
			utegn = Chr((int(AscW(tegn) / 262144) or 240) )
			res = res + utegn
			vtegn = Chr((int(AscW(tegn) / 4096) or 128) )
			res = res + vtegn
			wtegn = Chr((int(AscW(tegn) / 64) or 128) )
			res = res + wtegn
			xtegn = Chr((AscW(tegn) and 63) or 128)
			res = res + xtegn
			'putchar (0xF0 | c>>18);  F0=240, 2^18=262144
			'putchar (0x80 | c>>12 & 0x3F); 80=128, 2^12=4096
			'putchar (0x80 | c>>6 & 0x3F);  80=128, 2^6=64
			'putchar (0x80 | c & 0x3F);  80=128, 3F=63
		end if
		end if
		end if
		end if

	Next
	' return res
	utf8 = res

End function

sub SessionOutput(text)
	Session.Output(text)
end sub

listGMLExampleForPackage
