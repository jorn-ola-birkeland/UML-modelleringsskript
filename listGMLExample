option explicit

!INC Local Scripts.EAConstants-VBScript

' script:		listGMLExample
' purpose:		Generates GML example objects from feature types in the model
' version:		2018-09-11, 09-12, 09-14, 09-16(single class)
' TBD:          utf8 for sami characters, 
' TBD:			association [..*] pointing to supertype should make one xlink to each subtype,
' TBD:			(inheritance)loopdetection,,,,detect and set localId=gml:id/namespace=..?,cleanup


		DIM debug, namespace, kortnavn, pnteller, cuteller, suteller, soteller, obteller
		debug = false

sub listGMLExample()
	' Show and clear the script output window
	Repository.EnsureOutputVisible "Script"

	Dim theElement as EA.Element
	Set theElement = Repository.GetTreeSelectedObject()
	if not theElement is nothing  then
		'if theElement.Type="Package" and UCASE(theElement.Stereotype) = "APPLICATIONSCHEMA" then
		if Repository.GetTreeSelectedItemType() = otPackage then
		if UCASE(theElement.Element.Stereotype) = "APPLICATIONSCHEMA" then
			'Repository.WriteOutput "Script", Now & " " & theElement.Stereotype & " " & theElement.Name, 0
					dim message, indent
		'	dim box
		'	box = Msgbox ("Script listGMLExample" & vbCrLf & vbCrLf & "Scriptversion 2018-09-16" & vbCrLf & "Listing to GML example for package : [" & theElement.Name & "].",1)
		'	select case box
		'	case vbOK
				dim xsdfile
				'tømmer System Output for lettere å fange opp hele gml-fila
				Repository.ClearOutput "Script"
				Repository.CreateOutputTab "Error"
				Repository.ClearOutput "Error"
				kortnavn = getPackageTaggedValue(theElement,"SOSI_kortnavn")
				if kortnavn = "" then
					kortnavn = theElement.Name
				'	Repository.WriteOutput "Script", "Pakken mangler tagged value SOSI_kortnavn! Kjører midlertidig videre med pakkenavnet som forslag til kortnavn: " & vbCrLf & kortnavn, 0
				end if

				namespace = getPackageTaggedValue(theElement,"targetNamespace")
				if namespace = "" then
					namespace = kortnavn
				end if
				
				xsdfile = getPackageTaggedValue(theElement,"xsdDocument")
				if xsdfile = "" then
					xsdfile = kortnavn & ".xsd"
				end if
				'SessionOutput("test3: SOSI_kortnavn: " & vbCrLf & utf8(kortnavn) )
				SessionOutput("<?xml version=""1.0"" encoding=""utf-8""?>")
				SessionOutput("<wfs:FeatureCollection")
				SessionOutput("  xmlns=""" & namespace & """")
				SessionOutput("  xmlns:wfs=""http://www.opengis.net/wfs/2.0""")
				SessionOutput("  xmlns:gml=""http://www.opengis.net/gml/3.2""")
				SessionOutput("  xmlns:xlink=""http://www.w3.org/1999/xlink""")
				SessionOutput("  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""")
				SessionOutput("  xsi:schemaLocation=""" & namespace)
				'SessionOutput("                     """ & namespace & "." & kortnavn & ".xsd""")
				SessionOutput("                     " & namespace & "/" & xsdfile)
				SessionOutput("                     http://www.opengis.net/wfs/2.0")
				SessionOutput("                     http://schemas.opengis.net/wfs/2.0/wfs.xsd""")
				'SessionOutput("  timeStamp=""" & now & """")
				'SessionOutput("  timeStamp=""" & Year(Date) & "-" & FormatNumber(Month(Date),0,-1,0,0) & "-" & Day(Date) & "T" & Hour(Time) & ":" & Minute(Time) & ":" & Second(Time) & "Z""")
				'SessionOutput("  timeStamp=""" & Year(Date) & "-" & LPad(Month(Date),"0",2) & "-" & Day(Date) & "T" & Hour(Time) & ":" & Minute(Time) & ":" & Second(Time) & "Z""")
				dim m,d,t,min,sek,tm,td,tt,tmin,tsek
				m = Month(Date)
				if m < 10 then
					tm = "0" & FormatNumber(m,0,0,0,0)
				else
					tm = FormatNumber(m,0,0,0,0)
				end if
				d = Day(Date)
				if d < 10 then
					td = "0" & FormatNumber(d,0,0,0,0)
				else
					td = FormatNumber(d,0,0,0,0)
				end if
				t = Hour(Time)
				if t < 10 then
					tt = "0" & FormatNumber(t,0,0,0,0)
				else
					tt = FormatNumber(t,0,0,0,0)
				end if
				if t = 0 then tt = "00"
				min = Minute(Time)
				if min < 10 then
					tmin = "0" & FormatNumber(min,0,0,0,0)
				else
					tmin = FormatNumber(min,0,0,0,0)
				end if
				if min = 0 then tmin = "00"
				sek = Second(Time)
				if sek < 10 then
					tsek = "0" & FormatNumber(sek,0,0,0,0)
				else
					tsek = FormatNumber(sek,0,0,0,0)
				end if
				if sek = 0 then tsek = "00"
				SessionOutput("  timeStamp=""" & Year(Date) & "-" & tm & "-" & td & "T" & tt & ":" & tmin & ":" & tsek & "Z""")
				SessionOutput("  numberMatched=""unknown""")
				SessionOutput("  numberReturned=""0"">")
				'SessionOutput("  >")
				'SessionOutput("  <wfs:member>")

				call listFeatureTypes(theElement)

				SessionOutput("</wfs:FeatureCollection>")

				

		'	case VBcancel

		'	end select
		else			'No «ApplicationSchema» Package or a «FeatureType» Class selected in the tree
			MsgBox( "This script requires a «ApplicationSchema» Package to be selected in the Project Browser." & vbCrLf & _
			"Please select a package in the Project Browser and try again." )
	
		end if
		Else
			if Repository.GetTreeSelectedItemType() = otElement then
			if theElement.Type="Class" and UCASE(theElement.Stereotype) = "FEATURETYPE" then
				if debug then Repository.WriteOutput "Script", "Debug: theElement.Name [«" & theElement.Stereotype & "» " & theElement.Name & "] currentElement.Type [" & theElement.Type & "] currentElement.Abstract [" & theElement.Abstract & "].",0

				Repository.ClearOutput "Script"
				Repository.CreateOutputTab "Error"
				Repository.ClearOutput "Error"
				namespace = "http://some.server.no/namespace"
				kortnavn = "shortNamespace"
				SessionOutput("  <wfs:member>")
				SessionOutput("    <" & theElement.Name & " gml:id="""& theElement.Name & ".1"">")
				indent = "      "
				call listDatatypes(theElement.Name,theElement,indent)
				SessionOutput("    </" & theElement.Name & ">")
				SessionOutput("  </wfs:member>")
			else
				'Other than «ApplicationSchema» Package or a «FeatureType» Class selected in the tree
				MsgBox( "This script requires a «FeatureType» Class to be selected in the Project Browser." & vbCrLf & _
				"Please select a «ApplicationSchema» Package or a «FeatureType» Class in the Project Browser and try again." )
			end if
			else
				'Other than «ApplicationSchema» Package or a «FeatureType» Class selected in the tree
				MsgBox( "Element type selected: " & theElement.Type & vbCrLf & _
				"This script requires a «ApplicationSchema» Package or a «FeatureType» Class to be selected in the Project Browser." & vbCrLf & _
				"Please select a «ApplicationSchema» Package or a «FeatureType» Class in the Project Browser and try again." )
			end If
		end if
		'Repository.WriteOutput "Script", Now & " Finished, check the Error and Types tabs", 0
	end if
end sub


sub listFeatureTypes(pkg)
	dim presentasjonsnavn
 	dim elements as EA.Collection 
	dim super as EA.Element
	dim datatype as EA.Element
	dim conn as EA.Collection
 	set elements = pkg.Elements 
	dim i, sosinavn, sositype, sosilengde, sosimin, sosimax, koder, prikkniv, sosierlik, superlist
	dim indent, ftname
	if debug then Repository.WriteOutput "Script", "Debug: pkg.Name [" & pkg.Name & "].",0
	for i = 0 to elements.Count - 1 
		dim currentElement as EA.Element 
		set currentElement = elements.GetAt( i ) 
				
		if debug then Repository.WriteOutput "Script", "Debug: currentElement.Name [«" & currentElement.Stereotype & "» " & currentElement.Name & "] currentElement.Type [" & currentElement.Type & "] currentElement.Abstract [" & currentElement.Abstract & "].",0
		if currentElement.Type = "Class" and LCase(currentElement.Stereotype) = "featuretype" and currentElement.Abstract = 0 then
			
			SessionOutput("  <wfs:member>")
			SessionOutput("    <" & currentElement.Name & " gml:id="""& currentElement.Name & ".1"">")
			pnteller=0
			cuteller=0
			suteller=0
			soteller=0
			obteller=0
			
			ftname = currentElement.Name
			superlist = ""
			indent = "      "
			'for each conn in currentElement.Connectors
		'		if conn.Type = "Generalization" then
			'		if currentElement.ElementID = conn.ClientID then
			'			superlist = getSupertypes(ftname,conn.SupplierID, indent)
			'		end if
			'	end if
			'next

			call listDatatypes(ftname,currentElement,indent)
			SessionOutput("    </" & currentElement.Name & ">")
			SessionOutput("  </wfs:member>")

		end if
	
	next

	dim subP as EA.Package
	for each subP in pkg.packages
	    call listFeatureTypes(subP)
	next


end sub


sub listDatatypes(ftname,element,indent)
	dim presentasjonsnavn
 	dim elements as EA.Collection 
	dim super as EA.Element
	dim datatype as EA.Element
	dim conn as EA.Collection
	dim connEnd as EA.ConnectorEnd
	dim i, umlnavn, sosinavn, sositype, sosilengde, sosimin, sosimax, sosierlik, koder, prikkniv1, roleEndElementID, sosidef
	dim indent0, indent1, superlist
	
				
	if element.Type = "Datatype" or (element.Type = "Class" and LCase(element.Stereotype) = "datatype" or LCase(element.Stereotype) = "union" or LCase(element.Stereotype) = "featuretype") then

		if debug then Repository.WriteOutput "Script", "Debug: --------listDatatypes element.Name [" & element.Name & "] element.ElementID [" & element.ElementID & "].",0
		for each conn in element.Connectors
			if debug then Repository.WriteOutput "Script", "Debug: conn.Type [" & conn.Type & "] conn.ClientID [" & conn.ClientID & "] conn.SupplierID [" & conn.SupplierID & "].",0
			if conn.Type = "Generalization" then
				if element.ElementID = conn.ClientID then
					if debug then Repository.WriteOutput "Script", "Debug: supertype [" & Repository.GetElementByID(conn.SupplierID).Name & "].",0
'					superlist = getSupertypes(ftname, conn.SupplierID, indent)
					set super = Repository.GetElementByID(conn.SupplierID)
					call listDatatypes(ftname,super,indent)
				end if
			end if
		next
		if debug then Repository.WriteOutput "Script", "Debug: superlist [" & superlist & "].",0

		dim attr as EA.Attribute
		for each attr in element.Attributes

			'SessionOutput(indent & "<" & attr.Name & ">")

			if getSosiGeometritype(attr) = "" then
				if debug then Repository.WriteOutput "Script", "Debug: attr.Name [" & attr.Name & "] not geometry.",0
				if attr.ClassifierID <> 0 and getBasicSOSIType(attr.Type) = "*" then
					set datatype = Repository.GetElementByID(attr.ClassifierID)
					'see if the datatype has a supertype, if so then write all its elements first - TBD
					
					if datatype.Name = element.Name and datatype.ParentID = element.ParentID then
					'if datatype.ClassifierID = element.ClassifierID then
						Repository.WriteOutput "Script", "Error - circular self reference: datatype.Name [" & datatype.Name & "] from attribute name [" & element.Name & "." & attr.Name & "].",0
						exit sub
					else
						if datatype.Type = "Enumeration" or LCase(datatype.Stereotype) = "codelist" or LCase(datatype.Stereotype) = "enumeration" then
							'list first code in the list
							
							'variant gml:CodeType
							SessionOutput(indent & "<" & attr.Name & ">" & listCodeType(datatype) & "</" & attr.Name & ">")

							'variant gml:ReferenceType
						'	SessionOutput(indent & "<" & attr.Name & " xlink:href=""" & namespace & "/" & attr.Type & "/" & listCodeType(datatype) & """/>")
							'SessionOutput(indent & "<" & attr.Name & " xlink:href=""" & listReferenceType(attr.Type) & """/>")
							
							'listCodeType(attr)
						else
							SessionOutput(indent & "<" & attr.Name & ">")
							indent0 = indent & "  "
							SessionOutput(indent0 & "<" & datatype.Name & ">")
							indent1 = indent0 & "  "
							call listDatatypes(ftname, datatype,indent1)
							SessionOutput(indent0 & "</" & datatype.Name & ">")
							SessionOutput(indent & "</" & attr.Name & ">")
						end if
					end if
				else
					'base type
					SessionOutput(indent & "<" & attr.Name & ">" & listBaseType(ftname, attr.Name,attr.Type) & "</" & attr.Name & ">")

				end if
			else
				'geometry type 
				if debug then Repository.WriteOutput "Script", "Debug: attr.Name [" & attr.Name & "] is geometry: " & getSosiGeometritype(attr) & ".",0
				SessionOutput(indent & "<" & attr.Name & ">")
				call listGeometryType(ftname, attr.Type, indent & "  ")			
				SessionOutput(indent & "</" & attr.Name & ">")
			end if

			'SessionOutput(indent & "</" & attr.Name & ">")
		next
			
		for each conn in element.Connectors
			if conn.Type = "Generalization" or conn.Type = "Realisation" or conn.Type = "NoteLink" then

			else
				'Repository.WriteOutput "Script", "Debug: Supplier Role.Name [" & conn.SupplierEnd.Role & "] datatypens SOSI_navn [" & getTaggedValue(Repository.GetElementByID(conn.ClientID).Name,"SOSI_navn") & "].",0
				'Repository.WriteOutput "Script", "Debug: Client Role.Name [" & conn.ClientEnd.Role & "] datatypens SOSI_navn [" & getTaggedValue(Repository.GetElementByID(conn.ClientID).Name,"SOSI_navn") & "].",0
				if debug then Repository.WriteOutput "Script", "Debug: Supplier Role.Name [" & conn.SupplierEnd.Role & "] datatypens SOSI_navn [" & Repository.GetElementByID(conn.SupplierID).Name & "].",0
				if debug then Repository.WriteOutput "Script", "Debug: Client Role.Name [" & conn.ClientEnd.Role & "] datatypens SOSI_navn [" & Repository.GetElementByID(conn.ClientID).Name & "].",0

				if conn.ClientID = element.ElementID then
					set datatype = Repository.GetElementByID(conn.SupplierID)
					umlnavn = conn.SupplierEnd.Role
					if conn.ClientEnd.Aggregation = 2 then
						'composition+mandatory->nest as datatype inline?
						SessionOutput(indent & "<" & umlnavn & ">")
						indent0 = indent & "  "
						SessionOutput(indent0 & "<" & datatype.Name & ">")
						indent1 = indent0 & "  "
						call listDatatypes(ftname, datatype,indent1)
						SessionOutput(indent0 & "</" & datatype.Name & ">")
						SessionOutput(indent & "</" & umlnavn & ">")
					else
						if conn.SupplierEnd.Navigable = "Navigable" then
							'navigable->make xlink? 
							SessionOutput(indent & "<" & umlnavn & " xlink:href=""#" & datatype.Name & ".1""/>")
						end if
					end if
				else
					set datatype = Repository.GetElementByID(conn.ClientID)
					umlnavn = conn.ClientEnd.Role
					if conn.SupplierEnd.Aggregation = 2 then
						'composition+mandatory->nest as datatype inline?
						SessionOutput(indent & "<" & umlnavn & ">")
						indent0 = indent & "  "
						SessionOutput(indent0 & "<" & datatype.Name & ">")
						indent1 = indent0 & "  "
						call listDatatypes(ftname, datatype,indent1)
						SessionOutput(indent0 & "</" & datatype.Name & ">")
						SessionOutput(indent & "</" & umlnavn & ">")
					else
						if conn.ClientEnd.Navigable = "Navigable" then
							'navigable->make xlink? 
							SessionOutput(indent & "<" & umlnavn & " xlink:href=""#" & datatype.Name & ".1""/>")
						end if
					end if
				end if

			end if

		next

	end if

end sub


function listBaseType(ftname,umlname, umltype)
	listBaseType = "*"
	if umltype = "CharacterString" then
		if umlname = "navnerom" or umlname = "namespace" then
			listBaseType = "http://data.geonorge.no/" & Kortnavn 
		else
			if umlname = "lokalId" or umlname = "localId" then
				listBaseType = ftname & ".1"
			else
				listBaseType = "Some text"
			end if
		end if
	end if
	if umltype = "Boolean" then
		listBaseType = "true"
	end if
	if umltype = "Date" then
		listBaseType = "2018-09-11"
	end if
	if umltype = "DateTime" then
		listBaseType = "2018-09-11T21:08:00Z"
	end if
	if umltype = "Integer" then
		listBaseType = "99"
	end if
	if umltype = "Real" then
		listBaseType = "99.99"
	end if
end function


function listCodeType(element)
	listCodeType = "*"
	dim attr as EA.Attribute
	for each attr in element.Attributes
		listCodeType = attr.Name
		if attr.Default <> "" then listCodeType = attr.Default
		exit for
	next
end function

sub listGeometryType(elementName, geomtype, indent)

		if geomtype = "Punkt" or geomtype = "GM_Point" then
				pnteller = pnteller + 1
				SessionOutput(indent & "<gml:Point gml:id=""" & elementName & ".pn." & pnteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "  <gml:pos>60.02 10.1</gml:pos>")
				SessionOutput(indent & "</gml:Point>")
		end if
		if geomtype = "Sverm" or geomtype = "GM_MultiPoint" then
			'getSosiGeometritype = "SVERM"
		end if
		if geomtype = "Kurve" or geomtype = "GM_Curve" or geomtype = "GM_CompositeCurve" then
				cuteller = cuteller + 1
'				SessionOutput(indent & "<gml:Curve gml:id = """ & elementName & ".cu.1"" srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
'
				SessionOutput(indent & "<gml:LineString gml:id=""" & elementName & ".cu." & cuteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "  <gml:posList>60.02 10.1 60.02 10.3 60.03 10.2</gml:posList>")
				SessionOutput(indent & "</gml:LineString>")
		end if
		if geomtype = "Flate" or geomtype = "GM_Surface" or geomtype = "GM_CompositeSurface" then
'				SessionOutput(indent & "<gml:Surface gml:id = """ & elementName & ".su.1"" srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				suteller = suteller + 1
				SessionOutput(indent & "<gml:Polygon gml:id=""" & elementName & ".su." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "  <gml:exterior>")
				SessionOutput(indent & "    <gml:LinearRing>")
				SessionOutput(indent & "      <gml:posList>60.02 10.1 60.02 10.3 60.03 10.2 60.02 10.1</gml:posList>")
				SessionOutput(indent & "    </gml:LinearRing>")
				SessionOutput(indent & "  </gml:exterior>")
				SessionOutput(indent & "</gml:Polygon>")
'				SessionOutput(indent & "</gml:Surface>")
		end if
		if geomtype = "GM_Solid" or geomtype = "GM_CompositeSolid" then
			'getSosiGeometritype = "NO GO"
		end if
		if geomtype = "GM_Object" or geomtype = "GM_Primitive" then
				obteller = obteller + 1
				SessionOutput(indent & "<gml:Point gml:id=""" & elementName & ".ob." & obteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "  <gml:pos>60.02 10.1</gml:pos>")
				SessionOutput(indent & "</gml:Point>")
		end if
end sub

function getSupertypes(ftname,elementID, indent)
	dim super as EA.Element
	dim conn as EA.Collection
	dim supername, supernames
	set super = Repository.GetElementByID(elementID)
	for each conn in super.Connectors
		if conn.Type = "Generalization" then
			if super.ElementID = conn.ClientID then
				if debug then Repository.WriteOutput "Script", "Debug: getSupertypes super.Name [" & super.Name & "]  supername [" & supername & "].",0
				if debug then Repository.WriteOutput "Script", "Debug: supersupertype [" & Repository.GetElementByID(conn.SupplierID).Name & "].",0
				supername = getSupertypes(ftname, conn.SupplierID, indent)
			end if
		end if
	next
	if debug then Repository.WriteOutput "Script", "Debug: getSupertypes super.Name [" & super.Name & "]  supername [" & supername & "].",0
	getSupertypes = supername & " "  & super.Name
	call listDataTypes(ftname, super, indent)
end function

function getKoder(element)
		dim kode, koder
		koder = ""
		dim attr as EA.Attribute
		for each attr in element.Attributes
			'if debug then Repository.WriteOutput "Script", "Debug: code.Name [" & attr.Name & "] SOSI_navn [" & getTaggedValue(attr,"SOSI_navn") & "].",0
			kode = utf8(attr.Name)
			if getTaggedValue(attr,"SOSI_verdi") <> "" then
				kode = utf8(getTaggedValue(attr,"SOSI_verdi"))
			end if
			if attr.Default <> "" then
				kode = utf8(attr.Default)
			end if
			
			koder = koder & "," & kode
		next
		if Len(koder) < 2 then
			getKoder = ""
		else
			getKoder = Mid(koder,2,Len(koder))
		end if
end function

function getSosiGeometrityper(element)
		dim typer
		typer = ""
		dim attr as EA.Attribute
		for each attr in element.Attributes
			if getSosiGeometritype(attr) <> "" then
				typer = typer & "," & getSosiGeometritype(attr)
			end if
		next
		if Len(typer) < 2 then
			getSosiGeometrityper = ""
		else
			getSosiGeometrityper = Mid(typer,2,Len(typer))
		end if
end function


function getSosiGeometritype(element)

		getSosiGeometritype = ""
		if element.Type = "Punkt" or element.Type = "GM_Point" then
			getSosiGeometritype = "PUNKT"
		end if
		if element.Type = "Sverm" or element.Type = "GM_MultiPoint" then
			getSosiGeometritype = "SVERM"
		end if
		if element.Type = "Kurve" or element.Type = "GM_Curve" or element.Type = "GM_CompositeCurve" then
			getSosiGeometritype = "KURVE,BUEP,KLOTOIDE"
		end if
		if element.Type = "Flate" or element.Type = "GM_Surface" or element.Type = "GM_CompositeSurface" then
			getSosiGeometritype = "FLATE"
		end if
		if element.Type = "GM_Object" or element.Type = "GM_Primitive" then
			getSosiGeometritype = "PUNKT,SVERM,KURVE,BUEP,KLOTOIDE,FLATE"
		end if
end function


function getTaggedValue(element,taggedValueName)
		dim i, existingTaggedValue
		getTaggedValue = ""
		for i = 0 to element.TaggedValues.Count - 1
			set existingTaggedValue = element.TaggedValues.GetAt(i)
			if existingTaggedValue.Name = taggedValueName then
				getTaggedValue = existingTaggedValue.Value
			end if
		next
end function

function getPackageTaggedValue(package,taggedValueName)
		dim i, existingTaggedValue
		getPackageTaggedValue = ""
		for i = 0 to package.element.TaggedValues.Count - 1
			set existingTaggedValue = package.element.TaggedValues.GetAt(i)
			if existingTaggedValue.Name = taggedValueName then
				getPackageTaggedValue = existingTaggedValue.Value
			end if
		next
end function

function getConnectorEndTaggedValue(connectorEnd,taggedValueName)
	getConnectorEndTaggedValue = ""
	if not connectorEnd is nothing and Len(taggedValueName) > 0 then
		dim existingTaggedValue as EA.RoleTag 
		dim i
		for i = 0 to connectorEnd.TaggedValues.Count - 1
			set existingTaggedValue = connectorEnd.TaggedValues.GetAt(i)
			if existingTaggedValue.Tag = taggedValueName then
				getConnectorEndTaggedValue = existingTaggedValue.Value
			end if 
		next
	end if 
end function 

function getNCNameX(str)
	' make name legal SOSI-Kontrolfil (NC+ingen punktum)
	Dim txt, res, tegn, i, u
    u=0
		txt = Trim(str)
		'res = LCase( Mid(txt,1,1) )
		res = Mid(txt,1,1)
			'Repository.WriteOutput "Script", "New NCName: " & txt & " " & res,0

		' loop gjennom alle tegn
		For i = 2 To Len(txt)
		  ' blank, komma, !, ", #, $, %, &, ', (, ), *, +, /, :, ;, <, =, >, ?, @, [, \, ], ^, `, {, |, }, ~
		  ' (tatt med flere fnuttetyper, men hva med "."?) (‘'«»’)
		  tegn = Mid(txt,i,1)
		  if tegn = "." Then
			  'Repository.WriteOutput "Script", "Bad0 in SOSI-kontrollfil: " & tegn,0
			  u=1
		  Else
		  if tegn = " " or tegn = "," or tegn = """" or tegn = "#" or tegn = "$" or tegn = "%" or tegn = "&" or tegn = "(" or tegn = ")" or tegn = "*" Then
			  'Repository.WriteOutput "Script", "Bad1: " & tegn,0
			  u=1
		  Else
		    if tegn = "+" or tegn = "/" or tegn = ":" or tegn = ";" or tegn = "<" or tegn = ">" or tegn = "?" or tegn = "@" or tegn = "[" or tegn = "\" Then
			    'Repository.WriteOutput "Script", "Bad2: " & tegn,0
			    u=1
		    Else
		      If tegn = "]" or tegn = "^" or tegn = "`" or tegn = "{" or tegn = "|" or tegn = "}" or tegn = "~" or tegn = "'" or tegn = "´" or tegn = "¨" Then
			      'Repository.WriteOutput "Script", "Bad3: " & tegn,0
			      u=1
		      else
			      'Repository.WriteOutput "Script", "Good: " & tegn,0
			      If u = 1 Then
		          res = res + UCase(tegn)
		          u=0
			      else
		          res = res + tegn
		        End If
		      End If
		    End If
		  End If
		  End If
		Next
		' return res
		getNCNameX = res

End function

function getDefinitionText(currentElement)

    Dim txt, res, tegn, i, u
    u=0
	getDefinitionText = ""
		txt = Trim(currentElement.Notes)
		res = ""
		' loop gjennom alle tegn
		For i = 1 To Len(txt)
		  tegn = Mid(txt,i,1)
		  If tegn = ";" Then
			  res = res + " "
		  Else 
			If tegn = """" Then
			  res = res + "'"
			Else
			  If tegn < " " Then
			    res = res + " "
			  Else
			    res = res + Mid(txt,i,1)
			  End If
			End If
		  End If
		  
		Next
		
	getDefinitionText = res

end function

function getBasicSOSIType(umltype)
	getBasicSOSIType = "*"
	if umltype = "CharacterString" then
		getBasicSOSIType = "T"
	end if
	if umltype = "Boolean" then
		getBasicSOSIType = "BOOLSK"
	end if
	if umltype = "Date" then
		getBasicSOSIType = "DATO"
	end if
	if umltype = "DateTime" then
		getBasicSOSIType = "DATOTID"
	end if
	if umltype = "Integer" then
		getBasicSOSIType = "H"
	end if
	if umltype = "Real" then
		getBasicSOSIType = "D"
	end if
end function

function utf8(str)
	' make string utf-8
	Dim txt, res, tegn, utegn, vtegn, wtegn, xtegn, i
	
	utf8 = str
	exit function
	
    res = ""
	txt = Trim(str)
	' loop gjennom alle tegn
	For i = 1 To Len(txt)
		tegn = Mid(txt,i,1)

		'if      (c <    0x80) {  *out++=  c;                bits= -6; }
        'else if (c <   0x800) {  *out++= ((c >>  6) & 0x1F) | 0xC0;  bits=  0; }
        'else if (c < 0x10000) {  *out++= ((c >> 12) & 0x0F) | 0xE0;  bits=  6; }
        'else                  {  *out++= ((c >> 18) & 0x07) | 0xF0;  bits= 12; }

		if AscW(tegn) < 128 then
			res = res + tegn
		else if AscW(tegn) < 2048 then
			'u = AscW(tegn)
			'Repository.WriteOutput "Script", "tegn: " & AscW(tegn) & " " & Chr(AscW(tegn) / 64) & " " & int(u / 64),0
			'            c   229=E5/1110 0101
			'            c   192=C0/1100 0000  64=40/0100 0000
			utegn = Chr((int(AscW(tegn) / 64) or 192) )
			res = res + utegn
			'               c          63=3F/0011 1111
			vtegn = Chr((AscW(tegn) and 63) or 128)
			res = res + vtegn
			'            C3A5=å   195/1100 0011   165/1010 0101
			'Repository.WriteOutput "Script", "utf8: " & tegn & " -> " & utegn & " + " & vtegn,0
			'Repository.WriteOutput "Script", "int : " & AscW(tegn) & " -> " & Asc(utegn) & " + " & Asc(vtegn),0
		else if AscW(tegn) < 65536 then
			utegn = Chr((int(AscW(tegn) / 4096) or 224) )
			res = res + utegn
			vtegn = Chr((int(AscW(tegn) / 64) or 128) )
			res = res + vtegn
			wtegn = Chr((AscW(tegn) and 63) or 128)
			res = res + wtegn
			'putchar (0xE0 | c>>12);  E0=224, 2^12=4096
			'putchar (0x80 | c>>6 & 0x3F);  80=128, 2^6=64
			'putchar (0x80 | c & 0x3F);  80=128
		else if AscW(tegn) < 2097152 then	'/* 2^21 */
			utegn = Chr((int(AscW(tegn) / 262144) or 240) )
			res = res + utegn
			vtegn = Chr((int(AscW(tegn) / 4096) or 128) )
			res = res + vtegn
			wtegn = Chr((int(AscW(tegn) / 64) or 128) )
			res = res + wtegn
			xtegn = Chr((AscW(tegn) and 63) or 128)
			res = res + xtegn
			'putchar (0xF0 | c>>18);  F0=240, 2^18=262144
			'putchar (0x80 | c>>12 & 0x3F); 80=128, 2^12=4096
			'putchar (0x80 | c>>6 & 0x3F);  80=128, 2^6=64
			'putchar (0x80 | c & 0x3F);  80=128, 3F=63
		end if
		end if
		end if
		end if

	Next
	' return res
	utf8 = res

End function

sub SessionOutput(text)
	Session.Output(text)
end sub

listGMLExample
