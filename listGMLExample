option explicit

!INC Local Scripts.EAConstants-VBScript

' script:		listGMLExample
' purpose:		Generates GML example objects from all non-abstract feature types in the model
' note:         Important vbs-snag: decimal point character for numbers need to be set to "." in the regional settings
'
' author: 		Kent Jonsrud
'
' version:		2022-01-04 write http:// on URI attributes, move central points into surfaces, write debug as xml comments
' 				Codelist Url - (datatype,"codeList") vs. (attr,"defaultCodeSpace") line 259
' version:		2021-08-26 detect trailing slash in namespace, move point into surface of same object (for FKB 5.0)
' version:		2021-07-17/08-13 reads real example codelist codes from external registries
' version:		2021-06-08 disabled test for notEncoded, (for FKB 5.0, to be rolled back later?)
' version:		2021-04-28/29 each new geometry example to move aside from the previous
' version:		2020-11-21 gml:id only on content of CompositeXxx and EPSG/0/4326
' version:		2020-11-20 elaborate on the CompositeXxx 
' version:		2020-11-19 able to select 2D epsg/0/4326 or 3D epsg/0/5972 (25832+NN2000) geometries (and temporary test of SOSI-format-example)
' version:		2020-11-03 inherited roles point to (first of) concrete subtypes of abstract supertype
' version:		2020-04-15 attributes and associations to abstract classes
' version:		2020-04-03 fixed self associations, started on associations to abstract classes
' version:		2019-07-31 utelater eksempel av elementer med tagged value xsdEncodingRule = notEncoded
' version:		2019-06-13 fixed minor flaws after testruns on all UML-patterns
' version:		2019-05-31 Union fixed
' version:		2019-05-04 complete solid example, two xml elements where max multiplicity > 1
' version:		2018-09-11, 09-12, 09-14, 09-16(single class), 10-04 utf8
'
' 				candidates for improvement:
' TBD:			add the prefix on elements from external as packages, sort (attributes?+roles!) by tagged value sequenceNumber
' TBD:			multiple codelist codes and enumeration codes should have first and second code, now it has first code twice
' TBD:          utf8 (for all codes with any sami characters) does not survive the clipboard, should write directly to file
' TBD:          utf8 on model names in the gml:Solid-part
' TBD:			Union ok? (and soon MultiXxx?)
' TBD:			association [..*] pointing to supertype should make one xlink to each subtype
' TBD:			better placeholder value for <Identifier><namespace>
' TBD:			(inheritance)(datatype)loopdetection (association is ok-ish)
' TBD:			standard (getFeatureById-) container for the single object selection
' TBD:			documentation and cleanup


	DIM epsg, debug, namespace, kortnavn, pnteller, cuteller, suteller, soteller, obteller, eastoffset, eastdelta
	'roof - astarting on 1
	dim p1(18,2)
	'walls - starting on 1
	dim b1(29,2)
	'surface - starting on 0
	dim s1(7,2)
	'point
	dim r1, r2, r3
	'curve - starting on 1
	dim q1(5), q2(5), q3(5)
		


sub listGMLExample()
	' Show and clear the script output window
	Repository.EnsureOutputVisible "Script"

	Dim theElement as EA.Element
	Set theElement = Repository.GetTreeSelectedObject()
	if not theElement is nothing  then
		'if theElement.Type="Package" and UCASE(theElement.Stereotype) = "APPLICATIONSCHEMA" then
		if Repository.GetTreeSelectedItemType() = otPackage then
			if UCASE(theElement.Element.Stereotype) = "APPLICATIONSCHEMA" then
				'Repository.WriteOutput "Script", Now & " " & theElement.Stereotype & " " & theElement.Name, 0
						dim message, indent
			'	dim box
			'	box = Msgbox ("Script listGMLExample" & vbCrLf & vbCrLf & "Scriptversion 2018-09-16" & vbCrLf & "Listing to GML example for package : [" & theElement.Name & "].",1)
			'	select case box
			'	case vbOK
					dim xsdfile
					'tømmer System Output for lettere å fange opp hele gml-fila
					Repository.ClearOutput "Script"
					Repository.CreateOutputTab "Error"
					Repository.ClearOutput "Error"
					kortnavn = getPackageTaggedValue(theElement,"SOSI_kortnavn")
					if kortnavn = "" then
						kortnavn = theElement.Name
					'	Repository.WriteOutput "Script", "Pakken mangler tagged value SOSI_kortnavn! Kjører midlertidig videre med pakkenavnet som forslag til kortnavn: " & vbCrLf & kortnavn, 0
					end if

					namespace = getPackageTaggedValue(theElement,"targetNamespace")
					if namespace = "" then
						namespace = "http://schemas.someserver.org/" & kortnavn
					end if
					
					xsdfile = getPackageTaggedValue(theElement,"xsdDocument")
					if xsdfile = "" then
						xsdfile = kortnavn & ".xsd"
					end if
					SessionOutput("<?xml version=""1.0"" encoding=""utf-8""?>")
					SessionOutput("<wfs:FeatureCollection")
					SessionOutput("  xmlns=""" & utf8(namespace) & """")
					SessionOutput("  xmlns:wfs=""http://www.opengis.net/wfs/2.0""")
					SessionOutput("  xmlns:gml=""http://www.opengis.net/gml/3.2""")
					SessionOutput("  xmlns:xlink=""http://www.w3.org/1999/xlink""")
					SessionOutput("  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""")
					SessionOutput("  xsi:schemaLocation=""" & utf8(namespace))
					'SessionOutput("                     """ & namespace & "." & kortnavn & ".xsd""")
					if mid(namespace,len(namespace),1) = "/" then
						SessionOutput("                     " & utf8(namespace) & utf8(xsdfile))
					else
						SessionOutput("                     " & utf8(namespace) & "/" & utf8(xsdfile))
					end if
					SessionOutput("                     http://www.opengis.net/wfs/2.0")
					SessionOutput("                     http://schemas.opengis.net/wfs/2.0/wfs.xsd""")
					'SessionOutput("  timeStamp=""" & now & """")
					'SessionOutput("  timeStamp=""" & Year(Date) & "-" & FormatNumber(Month(Date),0,-1,0,0) & "-" & Day(Date) & "T" & Hour(Time) & ":" & Minute(Time) & ":" & Second(Time) & "Z""")
					'SessionOutput("  timeStamp=""" & Year(Date) & "-" & LPad(Month(Date),"0",2) & "-" & Day(Date) & "T" & Hour(Time) & ":" & Minute(Time) & ":" & Second(Time) & "Z""")


					SessionOutput("  timeStamp=""" & nao() & """")
					SessionOutput("  numberMatched=""unknown""")
					SessionOutput("  numberReturned=""0"">")

					call initCoord()
					call listFeatureTypes(theElement)

					SessionOutput("</wfs:FeatureCollection>")

					

			'	case VBcancel

			'	end select
			else			'No «ApplicationSchema» Package or a «FeatureType» Class selected in the tree
				MsgBox( "This script requires a «ApplicationSchema» Package or a «FeatureType» Class to be selected in the Project Browser." & vbCrLf & _
				"Please select a «ApplicationSchema» Package or a «FeatureType» Class  in the Project Browser and try again." )
		
			end if
		Else
			if Repository.GetTreeSelectedItemType() = otElement then
				if theElement.Type="Class" and UCASE(theElement.Stereotype) = "FEATURETYPE" then
					if debug then Repository.WriteOutput "Script", "Debug: theElement.Name [«" & theElement.Stereotype & "» " & theElement.Name & "] currentElement.Type [" & theElement.Type & "] currentElement.Abstract [" & theElement.Abstract & "].",0

					Repository.ClearOutput "Script"
					Repository.CreateOutputTab "Error"
					Repository.ClearOutput "Error"
					namespace = "http://schemas.someserver.org/someproduct"
					kortnavn = "shortNamespace"
					
					SessionOutput("  <!-- timeStamp=""" & nao() & """-->")
					SessionOutput("  <wfs:member>")
					SessionOutput("    <" & utf8(theElement.Name) & " gml:id="""& utf8(theElement.Name) & ".1"">")
					indent = "      "
					
					call initCoord()
					call listDatatypes(theElement.Name,theElement,indent)
					
					SessionOutput("    </" & utf8(theElement.Name) & ">")
					SessionOutput("  </wfs:member>")
				else
					'Other than «ApplicationSchema» Package or a «FeatureType» Class selected in the tree
					MsgBox( "This script requires a «ApplicationSchema» Package or a «FeatureType» Class to be selected in the Project Browser." & vbCrLf & _
					"Please select a «ApplicationSchema» Package or a «FeatureType» Class in the Project Browser and try again." )
				end if
			else
				'Other than «ApplicationSchema» Package or a «FeatureType» Class selected in the tree
				MsgBox( "Element type selected: " & theElement.Type & vbCrLf & _
				"This script requires a «ApplicationSchema» Package or a «FeatureType» Class to be selected in the Project Browser." & vbCrLf & _
				"Please select a «ApplicationSchema» Package or a «FeatureType» Class in the Project Browser and try again." )
			end If
		end if
		'Repository.WriteOutput "Script", Now & " Finished, check the Error and Types tabs", 0
	end if
end sub


sub listFeatureTypes(pkg)
	dim presentasjonsnavn
 	dim elements as EA.Collection 
	dim super as EA.Element
	dim datatype as EA.Element
	dim conn as EA.Collection
 	set elements = pkg.Elements 
	dim i, sosinavn, sositype, sosilengde, sosimin, sosimax, koder, prikkniv, sosierlik, superlist
	dim indent, ftname
	if debug then Repository.WriteOutput "Script", "<!-- Debug: pkg.Name [" & pkg.Name & "]. -->",0
	for i = 0 to elements.Count - 1 
		dim currentElement as EA.Element 
		set currentElement = elements.GetAt( i ) 
				
		if debug then Repository.WriteOutput "Script", "<!-- Debug: currentElement.Name [«" & currentElement.Stereotype & "» " & currentElement.Name & "] currentElement.Type [" & currentElement.Type & "] currentElement.Abstract [" & currentElement.Abstract & "]. -->",0
		if currentElement.Type = "Class" and LCase(currentElement.Stereotype) = "featuretype" and currentElement.Abstract = 0 then
		'ZZZ?		if currentElement.Type = "Class" and ( LCase(currentElement.Stereotype) = "featuretype" or LCase(currentElement.Stereotype) = "" ) and currentElement.Abstract = 0 then
			
			SessionOutput("  <wfs:member>")
			SessionOutput("    <" & utf8(currentElement.Name) & " gml:id="""& utf8(currentElement.Name) & ".1"">")
			
			ftname = currentElement.Name
			superlist = ""
			indent = "      "

			call listDatatypes(ftname,currentElement,indent)
			
			SessionOutput("    </" & utf8(currentElement.Name) & ">")
			SessionOutput("  </wfs:member>")

		end if
	
	next

	dim subP as EA.Package
	for each subP in pkg.packages
	    call listFeatureTypes(subP)
	next


end sub


sub listDatatypes(ftname,element,indent)
	dim presentasjonsnavn
 	dim elements as EA.Collection 
	dim element0 as EA.Element
	dim super as EA.Element
	dim datatype as EA.Element
	dim subbtype as EA.Element
	dim conn as EA.Collection
	dim connEnd as EA.ConnectorEnd
	dim i, umlnavn, sosinavn, sositype, sosilengde, sosimin, sosimax, sosierlik, koder, prikkniv1, roleEndElementID, sosidef, selfref, subID
	dim indent0, indent1, superlist
	
	eastoffset = eastoffset + eastdelta		
	if debug then Repository.WriteOutput "Script", "<!-- Debug: --------listDatatypes element.Name [" & element.Name & "] element.ElementID [" & element.ElementID & "]. -->",0
'ZZZ	if element.Type = "Datatype" or (element.Type = "Class" and LCase(element.Stereotype) = "datatype" or LCase(element.Stereotype) = "union" or LCase(element.Stereotype) = "featuretype") then
	if element.Type = "Datatype" or (element.Type = "Class" and LCase(element.Stereotype) = "" or LCase(element.Stereotype) = "datatype" or LCase(element.Stereotype) = "union" or LCase(element.Stereotype) = "featuretype") then
		
		for each conn in element.Connectors
			if debug then Repository.WriteOutput "Script", "<!-- Debug: conn.Type [" & conn.Type & "] conn.ClientID [" & conn.ClientID & "] conn.SupplierID [" & conn.SupplierID & "]. -->",0
			if conn.Type = "Generalization" then
				if element.ElementID = conn.ClientID then
					if debug then Repository.WriteOutput "Script", "<!-- Debug: supertype [" & Repository.GetElementByID(conn.SupplierID).Name & "]. -->",0
'					superlist = getSupertypes(ftname, conn.SupplierID, indent)
					set super = Repository.GetElementByID(conn.SupplierID)
					call listDatatypes(ftname,super,indent)
				end if
			end if
		next
'		if debug then Repository.WriteOutput "Script", "Debug: superlist [" & superlist & "].",0

		dim attr as EA.Attribute
		for each attr in element.Attributes
			if getSosiGeometritype(attr) = "" then
				if debug then Repository.WriteOutput "Script", "<!-- Debug: attr.Name [" & attr.Name & "] not geometry. -->",0
				if attr.ClassifierID <> 0 and getBasicSOSIType(attr.Type) = "*" then
					set datatype = Repository.GetElementByID(attr.ClassifierID)
					'see if the datatype has a supertype, if so then write all its elements first - TBD
					
					if datatype.Name = element.Name and datatype.ParentID = element.ParentID then
					'if datatype.ClassifierID = element.ClassifierID then
						Repository.WriteOutput "Script", "Error - circular self reference: datatype.Name [" & datatype.Name & "] from attribute name [" & element.Name & "." & attr.Name & "].",0
						exit sub
					else
						if datatype.Type = "Enumeration" or LCase(datatype.Stereotype) = "codelist" or LCase(datatype.Stereotype) = "enumeration" then
							'list first code in the list
							if getTaggedValue(attr,"inlineOrByReference") = "byReference" then
								'variant gml:ReferenceType
								'if debug then 
								SessionOutput(indent & "<" & attr.Name & " xlink:href=""" & namespace & "/" & attr.Type & "/" & listCodeType(datatype) & """/>")
								'SessionOutput(indent & "<" & attr.Name & " xlink:href=""" & listReferenceType(attr.Type) & """/>")
								if attr.UpperBound <> "1" then
								'	SessionOutput(indent & "<" & attr.Name & ">" & listCodeType(datatype) & "</" & attr.Name & ">")
									SessionOutput(indent & "<" & attr.Name & " xlink:href=""" & namespace & "/" & attr.Type & "/" & listCodeType(datatype) & """/>")
								end if
							else
								if getTaggedValue(datatype,"asDictionary") = "true" then
								'	if getTaggedValue(datatype,"codeList") <> "" and getTaggedValue(datatype,"codeList") = getTaggedValue(attr,"defaultCodeSpace") then
									if getTaggedValue(datatype,"codeList") <> "" then
										dim code1, code2, codeListUrl
										codeListUrl = getTaggedValue(datatype,"codeList")
										if getTaggedValue(attr,"defaultCodeSpace") <> "" then
											if getTaggedValue(attr,"defaultCodeSpace") <> codeListUrl then
												Repository.WriteOutput "Script", "<!-- Info: attr.Name [" & attr.Name & "] has a tagged value defaultCodeSpace [" & getTaggedValue(attr,"defaultCodeSpace") & "] that is different from the codelist class tagged value codeList [" & codeListUrl & "]. -->",0
											end if
											codeListUrl = getTaggedValue(attr,"defaultCodeSpace")
										end if
										call get2firstCodes(codeListUrl,code1,code2)
										if code1 <> "" then
											SessionOutput(indent & "<" & attr.Name & ">" & code1 & "</" & attr.Name & ">")
											if attr.UpperBound <> "1" then
												SessionOutput(indent & "<" & attr.Name & ">" & code2 & "</" & attr.Name & ">")
											end if	
										else
											SessionOutput(indent & "<" & attr.Name & ">" & "someExternalCodelistCode" & "</" & attr.Name & ">")
											if attr.UpperBound <> "1" then
												SessionOutput(indent & "<" & attr.Name & ">" & "someOtherExternalCodelistCode" & "</" & attr.Name & ">")
											end if		
										end if
									else
										SessionOutput(indent & "<" & attr.Name & ">" & "someExternalCodelistCode" & "</" & attr.Name & ">")
										if attr.UpperBound <> "1" then
											SessionOutput(indent & "<" & attr.Name & ">" & "someOtherExternalCodelistCode" & "</" & attr.Name & ">")
										end if		
									end if
								else
									'variant gml:CodeType
									SessionOutput(indent & "<" & attr.Name & ">" & listCodeType(datatype) & "</" & attr.Name & ">")
									if attr.UpperBound <> "1" then
										SessionOutput(indent & "<" & attr.Name & ">" & listCodeType(datatype) & "</" & attr.Name & ">")
									end if			
								end if
							end if
							'listCodeType(attr)
						else
							SessionOutput(indent & "<" & utf8(attr.Name) & ">")
							indent0 = indent & "  "
							SessionOutput(indent0 & "<" & utf8(datatype.Name) & ">")
							indent1 = indent0 & "  "
							call listDatatypes(ftname, datatype,indent1)
							SessionOutput(indent0 & "</" & utf8(datatype.Name) & ">")
							SessionOutput(indent & "</" & utf8(attr.Name) & ">")
							if attr.UpperBound <> "1" then
								' write a second instance of the attribute, currently with exactly same content
								' but should be made to pick a different value or the second code (TBD)
								SessionOutput(indent & "<" & utf8(attr.Name) & ">")
								indent0 = indent & "  "
								SessionOutput(indent0 & "<" & utf8(datatype.Name) & ">")
								indent1 = indent0 & "  "
								call listDatatypes(ftname, datatype,indent1)
								SessionOutput(indent0 & "</" & utf8(datatype.Name) & ">")
								SessionOutput(indent & "</" & utf8(attr.Name) & ">")
							end if

						end if
					end if
				else
					'base type
					SessionOutput(indent & "<" & utf8(attr.Name) & ">" & listBaseType(ftname, attr.Name,attr.Type) & "</" & utf8(attr.Name) & ">")
					if attr.UpperBound <> "1" then
						SessionOutput(indent & "<" & utf8(attr.Name) & ">" & listBaseType(ftname, attr.Name,attr.Type) & "</" & utf8(attr.Name) & ">")
					end if


				end if
			else
				'geometry type 
				if debug then Repository.WriteOutput "Script", "<!-- Debug: attr.Name [" & attr.Name & "] is geometry: " & getSosiGeometritype(attr) & ". -->",0
				SessionOutput(indent & "<" & utf8(attr.Name) & ">")
				call listGeometryType(ftname, attr.Type, indent & "  ")			
				SessionOutput(indent & "</" & utf8(attr.Name) & ">")
				if attr.UpperBound <> "1" then
					SessionOutput(indent & "<" & utf8(attr.Name) & ">")
					call listGeometryType(ftname, attr.Type, indent & "  ")			
					SessionOutput(indent & "</" & utf8(attr.Name) & ">")
				end if
	'			eastoffset = eastoffset + eastdelta
			end if

			'if Union then jump out of the loop after first(!) variant, this does not support well Unions having several different datatypes 
			if LCase(element.Stereotype) = "union" then
				Exit For
			end if
			
		next
			
		for each conn in element.Connectors
			if conn.Type = "Generalization" or conn.Type = "Realisation" or conn.Type = "NoteLink" then

			else
				'Repository.WriteOutput "Script", "Debug: Supplier Role.Name [" & conn.SupplierEnd.Role & "] datatypens SOSI_navn [" & getTaggedValue(Repository.GetElementByID(conn.ClientID).Name,"SOSI_navn") & "].",0
				'Repository.WriteOutput "Script", "Debug: Client Role.Name [" & conn.ClientEnd.Role & "] datatypens SOSI_navn [" & getTaggedValue(Repository.GetElementByID(conn.ClientID).Name,"SOSI_navn") & "].",0
				if debug then Repository.WriteOutput "Script", "<!-- Debug: Supplier Role.Name [" & conn.SupplierEnd.Role & "] datatypens navn [" & Repository.GetElementByID(conn.SupplierID).Name & "], conn.SupplierID [" & conn.SupplierID & "]. -->",0
				if debug then Repository.WriteOutput "Script", "<!-- Debug: Client Role.Name [" & conn.ClientEnd.Role & "] datatypens navn [" & Repository.GetElementByID(conn.ClientID).Name & "], conn.ClientID [" & conn.ClientID & "]. -->",0

				if conn.ClientID = element.ElementID then
				'	if getConnectorEndTaggedValue(conn.SupplierEnd,"xsdEncodingRule") <> "notEncoded" then
						set datatype = Repository.GetElementByID(conn.SupplierID)
						umlnavn = conn.SupplierEnd.Role
						if conn.ClientEnd.Aggregation = 2 and conn.SupplierID <> conn.ClientID then
'						if conn.ClientEnd.Aggregation = 2 and conn.SupplierID <> conn.ClientID or getConnectorEndTaggedValue(conn.SupplierEnd,"inlineOrByReference") = "inline"  then
							'composition+mandatory->nest as datatype inline?
							'inLineOrByReference?
							call listComposition(ftname,umlnavn,datatype,indent,conn.SupplierEnd.Cardinality)
						else
							call listAssociation(ftname,umlnavn,datatype,indent,conn.SupplierEnd.Cardinality,conn.SupplierEnd.Navigable,element.Name)
						end if
				'	end if

				else
				'	if getConnectorEndTaggedValue(conn.ClientEnd,"xsdEncodingRule") <> "notEncoded" then
						set datatype = Repository.GetElementByID(conn.ClientID)
						umlnavn = conn.ClientEnd.Role
						if conn.SupplierEnd.Aggregation = 2 then
							'composition+mandatory->nest as datatype inline?
							'inLineOrByReference?
							call listComposition(ftname,umlnavn,datatype,indent,conn.ClientEnd.Cardinality)
						else
							call listAssociation(ftname,umlnavn,datatype,indent,conn.ClientEnd.Cardinality,conn.ClientEnd.Navigable,element.Name)
						end if
				'	end if
				end if
			end if

		next

	end if

end sub



sub listComposition(ftname,umlnavn,datatype,indent,cardinality)
	dim indent0, indent1, subID
	dim subbtype as EA.Element

	SessionOutput(indent & "<" & utf8(umlnavn) & ">")
	indent0 = indent & "  "
'	'	SessionOutput(indent0 & "<" & utf8(datatype.Name) & ">")
	indent1 = indent0 & "  "
	if datatype.Abstract = 1 then
		'must move down to make an example of a instanciable subtype of the class pointed to TODO, NB needed on mandatory attributes!
		call getFirstConcreteSubtypeName(datatype,subID)
		set subbtype = Repository.GetElementByID(subID)
		SessionOutput(indent0 & "<" & utf8(subbtype.Name) & ">")
		call listDatatypes(ftname, subbtype,indent1)
		SessionOutput(indent0 & "</" & utf8(subbtype.Name) & ">")
	else
		SessionOutput(indent0 & "<" & utf8(datatype.Name) & ">")
		call listDatatypes(ftname, datatype,indent1)
		SessionOutput(indent0 & "</" & utf8(datatype.Name) & ">")
	end if
	SessionOutput(indent & "</" & utf8(umlnavn) & ">")
	if cardinality <> "0..1" and cardinality <> "1..1" and cardinality <> "1" then
		SessionOutput(indent & "<" & utf8(umlnavn) & ">")
		indent0 = indent & "  "
		SessionOutput(indent0 & "<" & utf8(datatype.Name) & ">")
		indent1 = indent0 & "  "
		if datatype.Abstract = 1 then
			'must move down to make an example of a instanciable subtype of the class pointed to TODO, NB needed on mandatory attributes!
			call getFirstConcreteSubtypeName(datatype,subID)
			set subbtype = Repository.GetElementByID(subID)
			SessionOutput(indent0 & "<" & utf8(subbtype.Name) & ">")
			call listDatatypes(ftname, subbtype,indent1)
			SessionOutput(indent0 & "</" & utf8(subbtype.Name) & ">")
		else
			SessionOutput(indent0 & "<" & utf8(datatype.Name) & ">")
			call listDatatypes(ftname, datatype,indent1)
			SessionOutput(indent0 & "</" & utf8(datatype.Name) & ">")
		end if
		SessionOutput(indent0 & "</" & utf8(datatype.Name) & ">")
		SessionOutput(indent & "</" & utf8(umlnavn) & ">")
	end if
end sub


sub listAssociation(ftname,umlnavn,datatype,indent,cardinality,navigable,elementname)
'sub listComposition(ftname,umlnavn,datatype,indent,cardinality)
	dim indent0, indent1, subID, selfref
	dim subbtype as EA.Element
	
	if navigable = "Navigable" then
		'self assoc? if so make xlinks to other (imaginary) instances of the same class
		selfref = 1
		if datatype.Name = elementname then
			selfref = 2
		end if 
		'navigable->make xlink? 
		if datatype.Abstract = 1 then
			'must move down to make an example of a instanciable subtype of the class pointed to TODO, NB needed on mandatory attributes!
			SessionOutput(indent & "<" & utf8(umlnavn) & " xlink:href=""#" & utf8(getFirstConcreteSubtypeName(datatype,subID)) & "." & selfref & """/>")
		else
			SessionOutput(indent & "<" & utf8(umlnavn) & " xlink:href=""#" & utf8(datatype.Name) & "." & selfref & """/>")
		end if
'								SessionOutput(indent & "<" & utf8(umlnavn) & " xlink:href=""#" & utf8(datatype.Name) & "." & selfref & """/>")
		if debug then Repository.WriteOutput "Script", "<!-- Debug: .Cardinality [" & cardinality & "]. -->",0
		if cardinality <> "0..1" and cardinality <> "1..1" and cardinality <> "1" then
			if datatype.Abstract = 1 then
				'must move down to make an example of a instanciable subtype of the class pointed to TODO, NB needed on mandatory attributes!
				SessionOutput(indent & "<" & utf8(umlnavn) & " xlink:href=""#" & utf8(getFirstConcreteSubtypeName(datatype,subID)) & "." & selfref + 1 & """/>")
			else
				SessionOutput(indent & "<" & utf8(umlnavn) & " xlink:href=""#" & utf8(datatype.Name) & "." & selfref + 1 & """/>")
			end if
		end if
	end if
							
end sub

function listBaseType(ftname,umlname, umltype)
	listBaseType = "FIX"
	if umltype = "CharacterString" then
		if umlname = "navnerom" or umlname = "namespace" then
			listBaseType = "http://data.geonorge.no/sosi/" & Kortnavn 
		else
			if umlname = "lokalId" or umlname = "localId" then
				listBaseType = ftname & ".1"
			else
				listBaseType = "Some meaningful text"
			end if
		end if
	end if
	if umltype = "Boolean" then
		listBaseType = "true"
	end if
	if umltype = "Date" then
		listBaseType = "2021-08-26"
	end if
	if umltype = "DateTime" then
		listBaseType = "2021-08-26T21:08:00Z"
	end if
	if umltype = "Integer" then
		listBaseType = "42"
	end if
	if umltype = "Real" then
		listBaseType = "21.21"
	end if
	if UCase(umltype) = "URI" then
		listBaseType = "http://"
	end if
end function


function listCodeType(element)
	listCodeType = "*"
	dim attr as EA.Attribute
	if element.Attributes.Count = 0 then
		listCodeType = "someExternalRegistryCode"
	else
		for each attr in element.Attributes
			listCodeType = attr.Name
			if attr.Default <> "" then listCodeType = attr.Default
			exit for
		next
	end if
end function



sub get2firstCodes(codeListUrl,code1,code2)
	Dim codelist
	codelist = ""
	code1 = ""
	code2 = ""
	' testing http get
	if codeListUrl <> "" then
	'	Session.Output("<!-- DEBUG codeListUrl: " & codeListUrl & " -->")
		Dim httpObject
		Dim parseText, line, linepart, part, kodenavn, kodedef, ualias, kodelistenavn
		Set httpObject = CreateObject("MSXML2.XMLHTTP")
	'	httpObject.open "GET", "http://skjema.geonorge.no/SOSI/basistype/Integer.html", false
		httpObject.open "GET", codeListUrl & ".gml", false
		httpObject.send
		if httpObject.status = 200 then
	'		Session.Output("DEBUG gml:Dictionary: "&httpObject.responseText&"")
	''		parseText = split(split(split(ResponseXML,SearchTag)(1),"</")(0),">")(1)
			parseText = split(httpObject.responseText,"<",-1,1)
			

			kodelistenavn = ""
			for each line in parseText
	'			Session.Output("DEBUG line: "&line&"")
				if mid(line,1,25) = "gml:identifier codeSpace=" then
					linepart = split(line,">",-1,1)
					for each part in linepart
						ualias = part
					next
				end if
				if mid(line,1,16) = "gml:description>" then
				linepart = split(line,">",-1,1)
					for each part in linepart
						kodedef = part
					next
				end if		
				if mid(line,1,9) = "gml:name>" then
				linepart = split(line,">",-1,1)
					for each part in linepart
						kodenavn = part
					next
				end if					
				

				if codelist <> "" and code1 <> "" and code2 = "" and ualias <> "" then code2 = ualias
		'		if codelist <> "" and code1 <> "" and code2 = "" then code2 = kodenavn
				if codelist <> "" and code1 = "" and ualias <> "" then code1 = ualias
		'		if codelist <> "" and code1 = "" then code1 = kodenavn
				if codelist = "" and ualias <> "" then codelist = ualias
				ualias = ""
				'if code2 <> "" then exit for					
			next
	'		Session.Output("|===")
		else
	'		Session.Output("Kodeliste kunne ikke hentes fra register: "&codeListUrl&"")	
	'		Session.Output(" ")		
			if debug then Session.Output("<!-- DEBUG feil ved lesing av kodeliste: ["&codeListUrl&"] status:["&httpObject.status&"]-->")
		end if
	end if
end sub


sub listGeometryType(elementName, geomtype, indent)

		if geomtype = "Punkt" or geomtype = "GM_Point" then
				pnteller = pnteller + 1
				if epsg = 5972 then
'					SessionOutput(indent & "<gml:Point gml:id=""" & elementName & ".pn." & pnteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "<gml:Point srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
'					SessionOutput(indent & "  <gml:pos>568497.68 6662024.15 90.67</gml:pos>")
					SessionOutput(indent & "  <gml:pos>"&r1+eastoffset&" "&r2&" "&r3&"</gml:pos>")
				else
					SessionOutput(indent & "<gml:Point gml:id=""" & elementName & ".pn." & pnteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
					SessionOutput(indent & "  <gml:pos>60.02 10.1</gml:pos>")
				end if
				SessionOutput(indent & "</gml:Point>")
		end if
		if geomtype = "Sverm" or geomtype = "GM_MultiPoint" then
			'getSosiGeometritype = "SVERM"
		end if


		
		if geomtype = "Kurve" or geomtype = "GM_Curve" then
				cuteller = cuteller + 1
				if epsg = 5972 then
'					SessionOutput(indent & "<gml:LineString gml:id=""" & elementName & ".cu." & cuteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "<gml:LineString srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
'					SessionOutput(indent & "  <gml:posList>568597.68 6662024.15 90.67 568497.68 6662024.15 90.67</gml:posList>")
					SessionOutput(indent & "  <gml:posList>"&q1(1)+eastoffset&" "&q2(1)&" "&q3(1)&" "&q1(2)+eastoffset&" "&q2(2)&" "&q3(2)&" "&q1(3)+eastoffset&" "&q2(3)&" "&q3(3)&" "&q1(4)+eastoffset&" "&q2(4)&" "&q3(4)&"</gml:posList>")
				else
					SessionOutput(indent & "<gml:LineString gml:id=""" & elementName & ".cu." & cuteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
					SessionOutput(indent & "  <gml:posList>60.02 10.1 60.02 10.3 60.03 10.2</gml:posList>")
				end if
				SessionOutput(indent & "</gml:LineString>")
		end if
		if geomtype = "GM_CompositeCurve" then
				cuteller = cuteller + 1
'				SessionOutput(indent & "<gml:Curve gml:id = """ & elementName & ".cc." & cuteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
				SessionOutput(indent & "<gml:CompositeCurve>")
				SessionOutput(indent & "  <gml:curveMember>")


				if epsg = 5972 then
					SessionOutput(indent & "    <gml:LineString gml:id=""" & elementName & ".cu." & cuteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
'					SessionOutput(indent & "     <gml:posList>568597.68 6662024.15 90.67 568497.68 6662024.15 90.67</gml:posList>")
					SessionOutput(indent & "    <gml:posList>"&q1(1)+eastoffset&" "&q2(1)&" "&q3(1)&" "&q1(2)+eastoffset&" "&q2(2)&" "&q3(2)&" "&q1(3)+eastoffset&" "&q2(3)&" "&q3(3)&" "&q1(4)+eastoffset&" "&q2(4)&" "&q3(4)&"</gml:posList>")
				else
					SessionOutput(indent & "    <gml:LineString gml:id=""" & elementName & ".cu." & cuteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
					SessionOutput(indent & "      <gml:posList>60.02 10.1 60.02 10.3 60.03 10.2</gml:posList>")
				end if
				SessionOutput(indent & "    </gml:LineString>")

				SessionOutput(indent & "  </gml:curveMember>")
				SessionOutput(indent & "</gml:CompositeCurve>")
'eller   <gml:CompositeCurve>
'          <gml:curveMember>
'            <gml:Curve gml:id = "PblTiltak.cc.1" srsName="http://www.opengis.net/def/crs/epsg/0/5972" srsDimension="3">
'              <gml:segments>
'                <gml:LineStringSegment>
'                 <gml:posList>568597.68 6662024.15 90.67 568497.68 6662024.15 90.67</gml:posList>
'                </gml:LineStringSegment>
'              </gml:segments>
'            </gml:Curve>
'          </gml:curveMember>
'        </gml:CompositeCurve>
		
		end if
		if geomtype = "Flate" or geomtype = "GM_Surface" then
'				SessionOutput(indent & "<gml:Surface gml:id = """ & elementName & ".su.1"" srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				suteller = suteller + 1
				if epsg = 5972 then
'					SessionOutput(indent & "<gml:Polygon gml:id=""" & elementName & ".su." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
		'			call generateSurfaceExample(elementName, indent, height)
					call generatePolygonExample(elementName, indent, height)
'					SessionOutput(indent & "<gml:Polygon srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
				else
					SessionOutput(indent & "<gml:Polygon gml:id=""" & elementName & ".su." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
					SessionOutput(indent & "  <gml:exterior>")
					SessionOutput(indent & "    <gml:LinearRing>")
					SessionOutput(indent & "      <gml:posList>60.02 10.1 60.02 10.3 60.03 10.2 60.02 10.1</gml:posList>")
					SessionOutput(indent & "    </gml:LinearRing>")
					SessionOutput(indent & "  </gml:exterior>")
					SessionOutput(indent & "</gml:Polygon>")
				end if
'				if epsg = 5972 then
'					SessionOutput(indent & "      <gml:posList>568444.03 6661981.48 89.20 568506.41 6662009.49 91.20 568525.84 6661998.97 90.80 568529.64 6662001.85 91.00 568535.02 6662054.94 91.50 568476.33 6662067.85 90.50 568466.50 6662054.49 90.50 568444.03 6661981.48 89.20</gml:posList>")
'				end if

'				SessionOutput(indent & "</gml:Surface>")

'
'eller	<gml:CompositeSurface srsName="http://www.opengis.net/def/crs/epsg/0/4258" gml:id="Havneavsnitt.CS111111">
'	 		<gml:surfaceMember>
' 				<gml:Surface srsName="http://www.opengis.net/def/crs/epsg/0/4258" gml:id="Havneavsnitt.S111111">
' 					<gml:patches>
' 						<gml:PolygonPatch>
' 							<gml:exterior>
' 								<gml:Ring>
' 									<gml:curveMember xlink:href="Havneavsnittgrense.C444444"/>
' 								</gml:Ring>
' 							</gml:exterior>
' 						</gml:PolygonPatch>
' 					</gml:patches>
' 				</gml:Surface>
' 			</gml: surfaceMember >
' 		</gml:CompositeSurface>


		end if
		if geomtype = "GM_CompositeSurface" then
		
			call generateCompositeSurfaceExample(elementName, indent)
			


'eller delt mellom flere objekter
'        <gml:CompositeSurface gml:id = "PblTiltak.cs.0" srsName="http://www.opengis.net/def/crs/epsg/0/5972" srsDimension="3">
'          <gml:surfaceMember>
'            <gml:Surface gml:id = "PblTiltak.su.0" srsName="http://www.opengis.net/def/crs/epsg/0/5972" srsDimension="3">
'              <gml:patches>
'                <gml:PolygonPatch>
'                  <gml:exterior>
'                    <gml:Ring>
'                      <gml:curveMember xlink:href="#Tiltaksgrense.cc.2"/>
'                    </gml:Ring>
'                  </gml:exterior>
'                </gml:PolygonPatch>
'              </gml:patches>
'            </gml:Surface>
'          </gml:surfaceMember>
'        </gml:CompositeSurface>
				
				
				
		end if
		if geomtype = "GM_Solid" or geomtype = "GM_CompositeSolid" then
			'getSosiGeometritype = "NO GO"
			dim height
			height = 6.0
			call generateSolidExample(elementName, indent, height)
'''			call generateSOSISolidExample(elementName, indent, height)
		end if
		if geomtype = "GM_Object" or geomtype = "GM_Primitive" then
				obteller = obteller + 1
				SessionOutput(indent & "<gml:Point gml:id=""" & elementName & ".ob." & obteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/4258"">")
				SessionOutput(indent & "  <gml:pos>60.02 10.1</gml:pos>")
				SessionOutput(indent & "</gml:Point>")
		end if
end sub



function getSosiGeometritype(element)

		getSosiGeometritype = ""
		if element.Type = "Punkt" or element.Type = "GM_Point" then
			getSosiGeometritype = "PUNKT"
		end if
		if element.Type = "Sverm" or element.Type = "GM_MultiPoint" then
			getSosiGeometritype = "SVERM"
		end if
		if element.Type = "Kurve" or element.Type = "GM_Curve" or element.Type = "GM_CompositeCurve" then
			getSosiGeometritype = "KURVE,BUEP,KLOTOIDE"
		end if
		if element.Type = "Flate" or element.Type = "GM_Surface" or element.Type = "GM_CompositeSurface" then
			getSosiGeometritype = "FLATE"
		end if
		if element.Type = "GM_Solid" or element.Type = "GM_CompositeSolid" then
			getSosiGeometritype = "NO GO"
		end if
		if element.Type = "GM_Object" or element.Type = "GM_Primitive" then
			getSosiGeometritype = "PUNKT,SVERM,KURVE,BUEP,KLOTOIDE,FLATE"
		end if
end function


function getTaggedValue(element,taggedValueName)
		dim i, existingTaggedValue
		getTaggedValue = ""
		for i = 0 to element.TaggedValues.Count - 1
			set existingTaggedValue = element.TaggedValues.GetAt(i)
			if existingTaggedValue.Name = taggedValueName then
				getTaggedValue = existingTaggedValue.Value
			end if
		next
end function

function getPackageTaggedValue(package,taggedValueName)
		dim i, existingTaggedValue
		getPackageTaggedValue = ""
		for i = 0 to package.element.TaggedValues.Count - 1
			set existingTaggedValue = package.element.TaggedValues.GetAt(i)
			if existingTaggedValue.Name = taggedValueName then
				getPackageTaggedValue = existingTaggedValue.Value
			end if
		next
end function

function getConnectorEndTaggedValue(connectorEnd,taggedValueName)
	getConnectorEndTaggedValue = ""
	if not connectorEnd is nothing and Len(taggedValueName) > 0 then
		dim existingTaggedValue as EA.RoleTag 
		dim i
		for i = 0 to connectorEnd.TaggedValues.Count - 1
			set existingTaggedValue = connectorEnd.TaggedValues.GetAt(i)
			if existingTaggedValue.Tag = taggedValueName then
				getConnectorEndTaggedValue = existingTaggedValue.Value
			end if 
		next
	end if 
end function 

function getBasicSOSIType(umltype)
	getBasicSOSIType = "*"
	if umltype = "CharacterString" then
		getBasicSOSIType = "T"
	end if
	if umltype = "Boolean" then
		getBasicSOSIType = "BOOLSK"
	end if
	if umltype = "Date" then
		getBasicSOSIType = "DATO"
	end if
	if umltype = "DateTime" then
		getBasicSOSIType = "DATOTID"
	end if
	if umltype = "Integer" then
		getBasicSOSIType = "H"
	end if
	if umltype = "Real" then
		getBasicSOSIType = "D"
	end if
end function

function utf8(str)
	' make string utf-8
	Dim txt, res, tegn, utegn, vtegn, wtegn, xtegn, i
	
	utf8 = str
	exit function
	
    res = ""
	txt = Trim(str)
	' loop gjennom alle tegn
	For i = 1 To Len(txt)
		tegn = Mid(txt,i,1)

		'if      (c <    0x80) {  *out++=  c;                bits= -6; }
        'else if (c <   0x800) {  *out++= ((c >>  6) & 0x1F) | 0xC0;  bits=  0; }
        'else if (c < 0x10000) {  *out++= ((c >> 12) & 0x0F) | 0xE0;  bits=  6; }
        'else                  {  *out++= ((c >> 18) & 0x07) | 0xF0;  bits= 12; }

		if AscW(tegn) < 128 then
			res = res + tegn
		else if AscW(tegn) < 2048 then
			'u = AscW(tegn)
			'Repository.WriteOutput "Script", "tegn: " & AscW(tegn) & " " & Chr(AscW(tegn) / 64) & " " & int(u / 64),0
			'            c   229=E5/1110 0101
			'            c   192=C0/1100 0000  64=40/0100 0000
			utegn = Chr((int(AscW(tegn) / 64) or 192) )
			res = res + utegn
			'               c          63=3F/0011 1111
			vtegn = Chr((AscW(tegn) and 63) or 128)
			res = res + vtegn
			'            C3A5=å   195/1100 0011   165/1010 0101
			'Repository.WriteOutput "Script", "utf8: " & tegn & " -> " & utegn & " + " & vtegn,0
			'Repository.WriteOutput "Script", "int : " & AscW(tegn) & " -> " & Asc(utegn) & " + " & Asc(vtegn),0
		else if AscW(tegn) < 65536 then
			utegn = Chr((int(AscW(tegn) / 4096) or 224) )
			res = res + utegn
			vtegn = Chr((int(AscW(tegn) / 64) or 128) )
			res = res + vtegn
			wtegn = Chr((AscW(tegn) and 63) or 128)
			res = res + wtegn
			'putchar (0xE0 | c>>12);  E0=224, 2^12=4096
			'putchar (0x80 | c>>6 & 0x3F);  80=128, 2^6=64
			'putchar (0x80 | c & 0x3F);  80=128
		else if AscW(tegn) < 2097152 then	'/* 2^21 */
			utegn = Chr((int(AscW(tegn) / 262144) or 240) )
			res = res + utegn
			vtegn = Chr((int(AscW(tegn) / 4096) or 128) )
			res = res + vtegn
			wtegn = Chr((int(AscW(tegn) / 64) or 128) )
			res = res + wtegn
			xtegn = Chr((AscW(tegn) and 63) or 128)
			res = res + xtegn
			'putchar (0xF0 | c>>18);  F0=240, 2^18=262144
			'putchar (0x80 | c>>12 & 0x3F); 80=128, 2^12=4096
			'putchar (0x80 | c>>6 & 0x3F);  80=128, 2^6=64
			'putchar (0x80 | c & 0x3F);  80=128, 3F=63
		end if
		end if
		end if
		end if

	Next
	' return res
	utf8 = res

End function

sub generateCompositeSurfaceExample(elementName, indent)


	'			if epsg = 5972 then
				SessionOutput(indent & "<gml:CompositeSurface>")
 				SessionOutput(indent & "  <gml:surfaceMember>")
				if epsg = 5972 then
					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".northroof." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&p1(1,0)+eastoffset&" "&p1(1,1)&" "&p1(1,2)&" "&p1(2,0)+eastoffset&" "&p1(2,1)&" "&p1(2,2)&" "&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&" "&p1(3,0)+eastoffset&" "&p1(3,1)&" "&p1(3,2)&" "&p1(4,0)+eastoffset&" "&p1(4,1)&" "&p1(4,2)&" "&p1(1,0)+eastoffset&" "&p1(1,1)&" "&p1(1,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")

					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".southroof1." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&p1(2,0)+eastoffset&" "&p1(2,1)&" "&p1(2,2)&" "&p1(5,0)+eastoffset&" "&p1(5,1)&" "&p1(5,2)&" "&p1(6,0)+eastoffset&" "&p1(6,1)&" "&p1(6,2)&" "&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&" "&p1(2,0)+eastoffset&" "&p1(2,1)&" "&p1(2,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")

					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".southroof2." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&" "&p1(8,0)+eastoffset&" "&p1(8,1)&" "&p1(8,2)&" "&p1(3,0)+eastoffset&" "&p1(3,1)&" "&p1(3,2)&" "&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")

					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".westroof." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&p1(6,0)+eastoffset&" "&p1(6,1)&" "&p1(6,2)&" "&p1(9,0)+eastoffset&" "&p1(9,1)&" "&p1(9,2)&" "&p1(10,0)+eastoffset&" "&p1(10,1)&" "&p1(10,2)&" "&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&" "&p1(6,0)+eastoffset&" "&p1(6,1)&" "&p1(6,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")

					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".eastroof." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&p1(10,0)+eastoffset&" "&p1(10,1)&" "&p1(10,2)&" "&p1(11,0)+eastoffset&" "&p1(11,1)&" "&p1(11,2)&" "&p1(8,0)+eastoffset&" "&p1(8,1)&" "&p1(8,2)&" "&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&" "&p1(10,0)+eastoffset&" "&p1(10,1)&" "&p1(10,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")
		
				else
					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".su." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>60.02 10.1 60.02 10.3 60.03 10.2 60.02 10.1</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")
				end if
 				SessionOutput(indent & "  </gml:surfaceMember>")
				
				
				
				
 				SessionOutput(indent & "</gml:CompositeSurface>")

end sub

sub generateHouseCompositeSurfaceExample(elementName, indent)


	'			if epsg = 5972 then
				SessionOutput(indent & "<gml:CompositeSurface>")
 				SessionOutput(indent & "  <gml:surfaceMember>")
				if epsg = 5972 then
					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".northroof." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&b1(1,0)+eastoffset&" "&b1(1,1)&" "&b1(1,2)&" "&b1(2,0)+eastoffset&" "&b1(2,1)&" "&b1(2,2)&" "&b1(7,0)+eastoffset&" "&b1(7,1)&" "&b1(7,2)&" "&b1(3,0)+eastoffset&" "&b1(3,1)&" "&b1(3,2)&" "&b1(4,0)+eastoffset&" "&b1(4,1)&" "&b1(4,2)&" "&b1(1,0)+eastoffset&" "&b1(1,1)&" "&b1(1,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")
					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".northwall." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&b1(1,0)+eastoffset&" "&b1(1,1)&" "&b1(1,2)&" "&b1(4,0)+eastoffset&" "&b1(4,1)&" "&b1(4,2)&" "&b1(4,0)+eastoffset&" "&b1(4,1)&" "&b1(4,2)-5.00&" "&b1(1,0)+eastoffset&" "&b1(1,1)&" "&b1(1,2)-5.00&" "&b1(1,0)+eastoffset&" "&b1(1,1)&" "&b1(1,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")
					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".northwestwall." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&b1(1,0)+eastoffset&" "&b1(1,1)&" "&b1(1,2)&" "&b1(1,0)+eastoffset&" "&b1(1,1)&" "&b1(1,2)-5.00&" "&b1(5,0)+eastoffset&" "&b1(5,1)&" "&b1(5,2)-5.00&" "&b1(5,0)+eastoffset&" "&b1(5,1)&" "&b1(5,2)&" "&b1(2,0)+eastoffset&" "&b1(2,1)&" "&b1(2,2)&" "&b1(1,0)+eastoffset&" "&b1(1,1)&" "&b1(1,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")

					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".southroof1." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&p1(2,0)+eastoffset&" "&p1(2,1)&" "&p1(2,2)&" "&p1(5,0)+eastoffset&" "&p1(5,1)&" "&p1(5,2)&" "&p1(6,0)+eastoffset&" "&p1(6,1)&" "&p1(6,2)&" "&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&" "&p1(2,0)+eastoffset&" "&p1(2,1)&" "&p1(2,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")

					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".southroof2." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&" "&p1(8,0)+eastoffset&" "&p1(8,1)&" "&p1(8,2)&" "&p1(3,0)+eastoffset&" "&p1(3,1)&" "&p1(3,2)&" "&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")

					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".westroof." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&p1(6,0)+eastoffset&" "&p1(6,1)&" "&p1(6,2)&" "&p1(9,0)+eastoffset&" "&p1(9,1)&" "&p1(9,2)&" "&p1(10,0)+eastoffset&" "&p1(10,1)&" "&p1(10,2)&" "&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&" "&p1(6,0)+eastoffset&" "&p1(6,1)&" "&p1(6,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")

					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".eastroof." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>"&p1(10,0)+eastoffset&" "&p1(10,1)&" "&p1(10,2)&" "&p1(11,0)+eastoffset&" "&p1(11,1)&" "&p1(11,2)&" "&p1(8,0)+eastoffset&" "&p1(8,1)&" "&p1(8,2)&" "&p1(7,0)+eastoffset&" "&p1(7,1)&" "&p1(7,2)&" "&p1(10,0)+eastoffset&" "&p1(10,1)&" "&p1(10,2)&"</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")
		
				else
					suteller = suteller + 1
					SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".su." & suteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
					SessionOutput(indent & "      <gml:exterior>")
					SessionOutput(indent & "        <gml:LinearRing>")
					SessionOutput(indent & "          <gml:posList>60.02 10.1 60.02 10.3 60.03 10.2 60.02 10.1</gml:posList>")
					SessionOutput(indent & "        </gml:LinearRing>")
					SessionOutput(indent & "      </gml:exterior>")
					SessionOutput(indent & "    </gml:Polygon>")
				end if
 				SessionOutput(indent & "  </gml:surfaceMember>")
				
				
				
				
 				SessionOutput(indent & "</gml:CompositeSurface>")

end sub

sub generateSurfaceExample(elementName, indent, height)

	dim c1(2), z1(2), h1, posNum, i
	h1 = height

	posNum = 8
	z1(0) =0.0
	z1(1) =0.0
	z1(2) =0.0
	
'	calculate the central point and mean height

	for i = 0 to posNum - 2
		s1(i,0) = s1(i,0) + eastoffset
		z1(0) = z1(0) + s1(i,0)
		z1(1) = z1(1) + s1(i,1)
		z1(2) = z1(2) + s1(i,2)
	next
	
	c1(0) = Round( z1(0) / (posNum - 1),2)
	c1(1) = Round( z1(1) / (posNum - 1),2)
	c1(2) = Round( z1(2) / (posNum - 1),2)
	
	soteller = soteller + 1	
	
	'				correct use of non-planar surface
		SessionOutput(indent & "<gml:Surface gml:id=""" & elementName & ".0612.202.27" & ".so." & soteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
		for i = 0 to posNum - 2
		
			suteller = suteller + 1	
			SessionOutput(indent & "  <gml:surfaceMember>")
			SessionOutput(indent & "    <gml:Polygon gml:id=""" & elementName & ".0612.202.27" & ".so."  & soteller & ".sh.1.su." & suteller & """>")
			SessionOutput(indent & "      <gml:exterior>")
			SessionOutput(indent & "        <gml:LinearRing>")
			
			SessionOutput(indent & "          <gml:posList>" & c1(0) & " " & c1(1) & " " & c1(2) & " " & s1(i+1,0) & " " & s1(i+1,1) & " " & s1(i+1,2) & " " & s1(i,0) & " " & s1(i,1) & " " & s1(i,2) & " " & c1(0) & " " & c1(1) & " " & c1(2) & "</gml:posList>")
			
			SessionOutput(indent & "        </gml:LinearRing>")
			SessionOutput(indent & "      </gml:exterior>")
			SessionOutput(indent & "    </gml:Polygon>")
			SessionOutput(indent & "  </gml:surfaceMember>")

		next
		SessionOutput(indent & "</gml:Surface>")

end sub

sub generatePolygonExample(elementName, indent, height)

	soteller = soteller + 1	
	
	'				best practice is use of gml:Polygon even if all values are not on the same plane (not airplane)
		SessionOutput(indent & "<gml:Polygon gml:id=""" & elementName & ".0612.202.27" & ".so." & soteller & """ srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")

			SessionOutput(indent & "  <gml:exterior>")
			SessionOutput(indent & "    <gml:LinearRing>")
			SessionOutput(indent & "      <gml:posList>"&s1(0,0)+eastoffset&" "&s1(0,1)&" "&s1(0,2)&" "&s1(1,0)+eastoffset&" "&s1(1,1)&" "&s1(1,2)&" "&s1(2,0)+eastoffset&" "&s1(2,1)&" "&s1(2,2)&" "&s1(3,0)+eastoffset&" "&s1(3,1)&" "&s1(3,2)&" "&s1(4,0)+eastoffset&" "&s1(4,1)&" "&s1(4,2)&" "&s1(5,0)+eastoffset&" "&s1(5,1)&" "&s1(5,2)&" "&s1(6,0)+eastoffset&" "&s1(6,1)&" "&s1(6,2)&" "&s1(0,0)+eastoffset&" "&s1(0,1)&" "&s1(0,2)&"</gml:posList>")
			SessionOutput(indent & "    </gml:LinearRing>")
			SessionOutput(indent & "  </gml:exterior>")
			
		SessionOutput(indent & "</gml:Polygon>")

end sub

sub generateSolidExample(elementName, indent, height)

'
'	start with a small surface with different elevations in each coordinate position, and with no interiors

'	test whether the whole surface is in a single plane, and if so consider skipping the center point part(?)

'	split the surface in subsurfaces where it is possible to generate a central point thet has direct vision to all its perimeter points(?)

'	find the central point and the mean height

'	construct the set of floor surface slices from the central point to every two consecutive points on the perimeter 

'	erect a set of sheet piles from two and two perimeter points up the given height above the floor

'	copy the reverse of the floor as a roof and add the given height to it

'	.


'	hardcode a totally random surface to start with
'   srsName="urn:ogc:def:crs:EPSG::5972" srsDimension="3">
'	568444.03 6661981.48 89.20
'	568506.41 6662009.49 91.20
'	568525.84 6661998.97 90.80
'	568529.64 6662001.85 91.00
'	568535.02 6662054.94 91.50
'	568476.33 6662067.85 90.50
'	568466.50 6662054.49 90.50
'	568444.03 6661981.48 89.20
	dim c1(2), z1(2), h1, posNum, i
	h1 = height

	posNum = 8
	z1(0) =0.0
	z1(1) =0.0
	z1(2) =0.0
	
'	calculate the central point and mean height

	for i = 0 to posNum - 2
		s1(i,0) = s1(i,0) + eastoffset
		z1(0) = z1(0) + s1(i,0)
		z1(1) = z1(1) + s1(i,1)
		z1(2) = z1(2) + s1(i,2)
	next
	
	c1(0) = Round( z1(0) / (posNum - 1),2)
	c1(1) = Round( z1(1) / (posNum - 1),2)
	c1(2) = Round( z1(2) / (posNum - 1),2)
	
'	start the xml structure of the gml:Solid
	soteller = soteller + 1	
    SessionOutput(indent & "<gml:Solid gml:id=""" & elementName & ".0612.202.27" & ".so." & soteller & """")
    SessionOutput(indent & "  srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")
    SessionOutput(indent & "  <gml:exterior>")
    SessionOutput(indent & "    <gml:Shell gml:id=""" & elementName & ".0612.202.27" & ".so." & soteller & ".sh.1""")
    SessionOutput(indent & "      srsName=""http://www.opengis.net/def/crs/epsg/0/5972"" srsDimension=""3"">")

'	generate the floor tiles
	
	for i = 0 to posNum - 2
	
		suteller = suteller + 1	
		SessionOutput(indent & "      <gml:surfaceMember>")
		SessionOutput(indent & "        <gml:Polygon gml:id=""" & elementName & ".0612.202.27" & ".so."  & soteller & ".sh.1.su." & suteller & """>")
		SessionOutput(indent & "          <gml:exterior>")
		SessionOutput(indent & "            <gml:LinearRing>")
		
		SessionOutput(indent & "              <gml:posList>" & c1(0) & " " & c1(1) & " " & c1(2) & " " & s1(i+1,0) & " " & s1(i+1,1) & " " & s1(i+1,2) & " " & s1(i,0) & " " & s1(i,1) & " " & s1(i,2) & " " & c1(0) & " " & c1(1) & " " & c1(2) & "</gml:posList>")
		
		SessionOutput(indent & "            </gml:LinearRing>")
		SessionOutput(indent & "          </gml:exterior>")
		SessionOutput(indent & "        </gml:Polygon>")
		SessionOutput(indent & "      </gml:surfaceMember>")

	next

'	erect the sheet piles

	for i = 0 to posNum - 2
	
		suteller = suteller + 1	
		SessionOutput(indent & "      <gml:surfaceMember>")
		SessionOutput(indent & "        <gml:Polygon gml:id=""" & elementName & ".0612.202.27" & ".so."  & soteller & ".sh.1.su." & suteller & """>")
		SessionOutput(indent & "          <gml:exterior>")
		SessionOutput(indent & "            <gml:LinearRing>")
		
		SessionOutput(indent & "              <gml:posList>" & s1(i,0) & " " & s1(i,1) & " " & s1(i,2) & " " & s1(i+1,0) & " " & s1(i+1,1) & " " & s1(i+1,2) & " " & s1(i+1,0) & " " & s1(i+1,1) & " " & s1(i+1,2)+h1 & " " & s1(i,0) & " " & s1(i,1) & " " & s1(i,2)+h1 & " " & s1(i,0) & " " & s1(i,1) & " " & s1(i,2) & "</gml:posList>")
		
		SessionOutput(indent & "            </gml:LinearRing>")
		SessionOutput(indent & "          </gml:exterior>")
		SessionOutput(indent & "        </gml:Polygon>")
		SessionOutput(indent & "      </gml:surfaceMember>")

	next
	
'	generate the roof

	for i = 0 to posNum - 2
	
		suteller = suteller + 1	
		SessionOutput(indent & "      <gml:surfaceMember>")
		SessionOutput(indent & "        <gml:Polygon gml:id=""" & elementName & ".0612.202.27" & ".so."  & soteller & ".sh.1.su." & suteller & """>")
		SessionOutput(indent & "          <gml:exterior>")
		SessionOutput(indent & "            <gml:LinearRing>")
		
		SessionOutput(indent & "              <gml:posList>" & c1(0) & " " & c1(1) & " " & c1(2)+h1 & " " & s1(i,0) & " " & s1(i,1) & " " & s1(i,2)+h1 & " " & s1(i+1,0) & " " & s1(i+1,1) & " " & s1(i+1,2)+h1 & " " & c1(0) & " " & c1(1) & " " & c1(2)+h1 & "</gml:posList>")
		
		SessionOutput(indent & "            </gml:LinearRing>")
		SessionOutput(indent & "          </gml:exterior>")
		SessionOutput(indent & "        </gml:Polygon>")
		SessionOutput(indent & "      </gml:surfaceMember>")

	next

'	end the xml structure of the gml:Solid
    SessionOutput(indent & "    </gml:Shell>")
    SessionOutput(indent & "  </gml:exterior>")
    SessionOutput(indent & "</gml:Solid>")

end sub


sub generateSOSISolidExample(elementName, indent, height)

'	start with a small surface with different elevations in each coordinate position, and with no interiors

'	test whether the whole surface is in a single plane, and if so consider skipping the center point part(?)

'	split the surface in subsurfaces where it is possible to generate a central point thet has direct vision to all its perimeter points(?)

'	find the central point and the mean height

'	construct the set of floor surface slices from the central point to every two consecutive points on the perimeter 

'	erect a set of sheet piles from two and two perimeter points up the given height above the floor

'	copy the reverse of the floor as a roof and add the given height to it

'	.


'	hardcode a totally random surface to start with
'   srsName="urn:ogc:def:crs:EPSG::5972" srsDimension="3">
'	568444.03 6661981.48 89.20
'	568506.41 6662009.49 91.20
'	568525.84 6661998.97 90.80
'	568529.64 6662001.85 91.00
'	568535.02 6662054.94 91.50
'	568476.33 6662067.85 90.50
'	568466.50 6662054.49 90.50
'	568444.03 6661981.48 89.20
	dim h1, posNum, i, c1(2), z1(2)
	h1 = height*100

	
	posNum = 8
	z1(0) =0.0
	z1(1) =0.0
	z1(2) =0.0
	
'	calculate the central point and mean height

	for i = 0 to posNum - 2
		z1(0) = z1(0) + s1(i,0)
		z1(1) = z1(1) + s1(i,1)
		z1(2) = z1(2) + s1(i,2)
	next
	
'	c1(0) = Round( z1(0) / (posNum - 1),2)
'	c1(1) = Round( z1(1) / (posNum - 1),2)
'	c1(2) = Round( z1(2) / (posNum - 1),2)
	c1(0) = Round( z1(0) / (posNum - 1),0)
	c1(1) = Round( z1(1) / (posNum - 1),0)
	c1(2) = Round( z1(2) / (posNum - 1),0)
	
'	start the xml structure of the gml:Solid
	soteller = soteller + 1	
		SessionOutput(".HODE")
		SessionOutput("..TRANSPAR")
		SessionOutput("...KOORDSYS 22 EUREF89 UTM")
		SessionOutput("...ORIGO-NØ 0 0")
		SessionOutput("...ENHET 0.01")
		SessionOutput("..OMRÅDE")
		SessionOutput("...MIN-NØ 6660981 568044")
		SessionOutput("...MAX-NØ 6663024 568997")
		SessionOutput("!...ENHET-H 0.01")
		SessionOutput("!...VERT-DATUM NN2000")
'	generate the floor tiles
	
	for i = 0 to posNum - 2
		suteller = suteller + 1	
		SessionOutput(".FLATE " & suteller & ":")	
		SessionOutput("..OBJTYPE " & elementName)	
		suteller = suteller + 1	
		SessionOutput("..REF :" & suteller)
		SessionOutput(".KURVE " & suteller & ":")	
		SessionOutput("..OBJTYPE " & elementName & "grense")	
		SessionOutput("..NØH")
		SessionOutput(c1(0) & " " & c1(1) & " " & c1(2)) 
		SessionOutput(s1(i+1,0) & " " & s1(i+1,1) & " " & s1(i+1,2))
		SessionOutput(s1(i,0) & " " & s1(i,1) & " " & s1(i,2))
		SessionOutput(c1(0) & " " & c1(1) & " " & c1(2))


	next

'	erect the sheet piles

	for i = 0 to posNum - 2
	
		suteller = suteller + 1	
		SessionOutput(".FLATE " & suteller & ":")	
		SessionOutput("..OBJTYPE " & elementName)	
		suteller = suteller + 1	
		SessionOutput("..REF :" & suteller)
		SessionOutput(".KURVE " & suteller & ":")	
		SessionOutput("..OBJTYPE " & elementName & "grense")	
		SessionOutput("..NØH")
		SessionOutput(s1(i,0) & " " & s1(i,1) & " " & s1(i,2))
		SessionOutput(s1(i+1,0) & " " & s1(i+1,1) & " " & s1(i+1,2))
		SessionOutput(s1(i+1,0) & " " & s1(i+1,1) & " " & s1(i+1,2)+h1)
		SessionOutput(s1(i,0) & " " & s1(i,1) & " " & s1(i,2)+h1)
		SessionOutput(s1(i,0) & " " & s1(i,1) & " " & s1(i,2))


	next
	
'	generate the roof

	for i = 0 to posNum - 2
	
		suteller = suteller + 1	
		SessionOutput(".FLATE " & suteller & ":")	
		SessionOutput("..OBJTYPE " & elementName)	
		suteller = suteller + 1	
		SessionOutput("..REF :" & suteller)
		SessionOutput(".KURVE " & suteller & ":")	
		SessionOutput("..OBJTYPE " & elementName & "grense")	
		SessionOutput("..NØH")
		SessionOutput(c1(0) & " " & c1(1) & " " & c1(2)+h1)
		SessionOutput(s1(i,0) & " " & s1(i,1) & " " & s1(i,2)+h1)
		SessionOutput(s1(i+1,0) & " " & s1(i+1,1) & " " & s1(i+1,2)+h1)
		SessionOutput(c1(0) & " " & c1(1) & " " & c1(2)+h1)


	next
	SessionOutput(".SLUTT")

end sub

sub SessionOutput(text)
	Session.Output(text)
end sub

function getFirstConcreteSubtypeName(datatype,subID)
	dim subber as EA.Element
'	dim datatype as EA.Element
	dim conn as EA.Collection
'	dim connEnd as EA.ConnectorEnd

	'subID = datatype.ElementID
	getFirstConcreteSubtypeName = "datatype.Name"
				
'	if element.Type = "Datatype" or (element.Type = "Class" and LCase(element.Stereotype) = "datatype" or LCase(element.Stereotype) = "union" or LCase(element.Stereotype) = "featuretype") then
	if datatype.Abstract = 1 then
		if debug then Repository.WriteOutput "Script", "<!-- Debug: --------datatype.Name [" & datatype.Name & "] datatype.ElementID [" & datatype.ElementID & "]. -->",0
		for each conn in datatype.Connectors
			if debug then Repository.WriteOutput "Script", "<!-- Debug: conn.Type [" & conn.Type & "] conn.ClientID [" & conn.ClientID & "] conn.SupplierID [" & conn.SupplierID & "]. -->",0
			if conn.Type = "Generalization" then
				if datatype.ElementID <> conn.ClientID then
					if debug then Repository.WriteOutput "Script", "<!-- Debug: subbtype [" & Repository.GetElementByID(conn.ClientID).Name & "]. -->",0
					set subber = Repository.GetElementByID(conn.ClientID)
					getFirstConcreteSubtypeName =  getFirstConcreteSubtypeName(subber,subID)
					exit function
				end if
			end if
		next
	else
		getFirstConcreteSubtypeName = datatype.Name
		subID = datatype.ElementID
	end if
	
end function

function getFirstConcreteSubtypeID(datatype)
	dim subber as EA.Element
'	dim datatype as EA.Element
	dim conn as EA.Collection
'	dim connEnd as EA.ConnectorEnd
	dim subID

	subID = datatype.ElementID
	getFirstConcreteSubtypeID = 0
				
'	if element.Type = "Datatype" or (element.Type = "Class" and LCase(element.Stereotype) = "datatype" or LCase(element.Stereotype) = "union" or LCase(element.Stereotype) = "featuretype") then
	if datatype.Abstract = 1 then
		if debug then Repository.WriteOutput "Script", "<!-- Debug: --------datatype.Name [" & datatype.Name & "] datatype.ElementID [" & datatype.ElementID & "]. -->",0
		call getFirstConcreteSubtypeName(datatype,subID)
	end if
	getFirstConcreteSubtypeID = subID
	
end function

function nao()
					' I just wanted a correct xml timestamp to document when the script was run
					dim m,d,t,min,sek,tm,td,tt,tmin,tsek
					m = Month(Date)
					if m < 10 then
						tm = "0" & FormatNumber(m,0,0,0,0)
					else
						tm = FormatNumber(m,0,0,0,0)
					end if
					d = Day(Date)
					if d < 10 then
						td = "0" & FormatNumber(d,0,0,0,0)
					else
						td = FormatNumber(d,0,0,0,0)
					end if
					t = Hour(Time)
					if t < 10 then
						tt = "0" & FormatNumber(t,0,0,0,0)
					else
						tt = FormatNumber(t,0,0,0,0)
					end if
					if t = 0 then tt = "00"
					min = Minute(Time)
					if min < 10 then
						tmin = "0" & FormatNumber(min,0,0,0,0)
					else
						tmin = FormatNumber(min,0,0,0,0)
					end if
					if min = 0 then tmin = "00"
					sek = Second(Time)
					if sek < 10 then
						tsek = "0" & FormatNumber(sek,0,0,0,0)
					else
						tsek = FormatNumber(sek,0,0,0,0)
					end if
					if sek = 0 then tsek = "00"
					'SessionOutput("  timeStamp=""" & Year(Date) & "-" & tm & "-" & td & "T" & tt & ":" & tmin & ":" & tsek & "Z""")
					nao = Year(Date) & "-" & tm & "-" & td & "T" & tt & ":" & tmin & ":" & tsek & "Z"
end function

sub initCoord()
	pnteller=0
	cuteller=0
	suteller=0
	soteller=0
	obteller=0
	debug = false
	epsg = 5972
	eastdelta = 100.00
	eastoffset = 0.00
	'epsg = 4259
	'eastdelta = 0.0003 ?TBD
	
	p1(0,0) = 568000.00
	p1(0,1) = 6660000.00 
	p1(0,2) = 80.00

	p1(1,0) = 568491.54
	p1(1,1) = 6662044.12
	p1(1,2) = 94.48
	p1(2,0) = 568489.13
	p1(2,1) = 6662039.14 
	p1(2,2) = 97.70
	p1(3,0) = 568503.65
	p1(3,1) = 6662032.15
	p1(3,2) = 97.77
	p1(4,0) = 568506.07
	p1(4,1) = 6662037.43
	p1(4,2) = 94.50
	p1(5,0) = 568487.11
	p1(5,1) = 6662034.97
	p1(5,2) = 95.11
	p1(6,0) = 568493.32
	p1(6,1) = 6662031.98
	p1(6,2) = 95.10
	p1(7,0) = 568499.55
	p1(7,1) = 6662034.12
	p1(7,2) = 97.77
	p1(8,0) = 568501.71
	p1(8,1) = 6662028.04
	p1(8,2) = 95.07
	p1(9,0) = 568489.40
	p1(9,1) = 6662023.88
	p1(9,2) = 95.18
	p1(10,0) = 568493.58
	p1(10,1) = 6662021.85
	p1(10,2) = 97.77
	p1(11,0) = 568499.39
	p1(11,1) = 6662023.37
	p1(11,2) = 95.07
	p1(12,0) = 568491.32
	p1(12,1) = 6662023.64
	p1(12,2) = 95.48
	p1(13,0) = 568487.15
	p1(13,1) = 6662015.14
	p1(13,2) = 95.48
	p1(14,0) = 568490.11
	p1(14,1) = 6662013.64 
	p1(14,2) = 93.53
	p1(15,0) = 568494.22
	p1(15,1) = 6662022.27 
	p1(15,2) = 93.53
	p1(16,0) = 568488.52
	p1(16,1) = 6662024.94
	p1(16,2) = 93.53
	p1(17,0) = 568484.40
	p1(17,1) = 6662016.53
	p1(17,2) = 93.68

	q1(1) = 568525.84
	q2(1) = 6661998.97
	q3(1) = 90.80
	q1(2) = 568520.52
	q2(2) = 6662017.57
	q3(2) = 90.80
	q1(3) = 568517.55
	q2(3) = 6662029.69
	q3(3) = 90.80
	q1(4) = 568511.79
	q2(4) = 6662034.72
	q3(4) = 90.80
		
	r1 = 568413.83
	r2 = 6662030.36
	r3 = 90.67	
	
	s1(0,0) = 568444.03
	s1(0,1) = 6661981.48 
	s1(0,2) = 89.20
	s1(1,0) = 568506.41 
	s1(1,1) = 6662009.49 
	s1(1,2) = 91.20
	s1(2,0) = 568525.84 
	s1(2,1) = 6661998.97
	s1(2,2) = 90.80
	s1(3,0) = 568529.64 
	s1(3,1) = 6662001.85 
	s1(3,2) = 91.00
	s1(4,0) = 568535.02 
	s1(4,1) = 6662054.94 
	s1(4,2) = 91.50
	s1(5,0) = 568476.33 
	s1(5,1) = 6662067.85 
	s1(5,2) = 90.50
	s1(6,0) = 568466.50 
	s1(6,1) = 6662054.49 
	s1(6,2) = 90.50
	s1(7,0) = 568444.03 
	s1(7,1) = 6661981.48 
	s1(7,2) = 89.20
	
	b1(1,0) = 568492.07
	b1(1,1) = 6662041.11
	b1(1,2) = 96.00
	b1(2,0) = 568490.32
	b1(2,1) = 6662038.50
	b1(2,2) = 97.50
	b1(3,0) = 568502.81
	b1(3,1) = 6662032.53
	b1(3,2) = 97.50
	b1(4,0) = 568504.15
	b1(4,1) = 6662035.87
	b1(4,2) = 96.0
	b1(5,0) = 568489.11
	b1(5,1) = 6662035.60
	b1(5,2) = 96.00
	b1(6,0) = 568494.91
	b1(6,1) = 6662032.53
	b1(6,2) = 96.00
	b1(7,0) = 568499.55
	b1(7,1) = 6662034.12
	b1(7,2) = 97.50
	b1(8,0) = 568501.19
	b1(8,1) = 6662029.51
	b1(8,2) = 96.00
	b1(9,0) = 568492.12
	b1(9,1) = 6662026.50
	b1(9,2) = 96.00
	b1(10,0) = 568495.18
	b1(10,1) = 6662025.07
	b1(10,2) = 97.50
	b1(11,0) = 568498.19
	b1(11,1) = 6662023.81
	b1(11,2) = 96.00
	

	
	
	
	
end sub

listGMLExample
